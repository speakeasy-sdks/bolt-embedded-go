// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreditCardAuthorizationReason - The reason code explaining the authorization status.
//   - `1` - none
//   - `2` - invalid_amount
//   - `3` - invalid_cvv
//   - `4` - invalid_cc_number
//   - `5` - expired
//   - `6` - risk
//   - `7` - lost_stolen
//   - `8` - call_issuer
//   - `9` - invalid_merchant_for_card
//   - `10` - unsupported_payment_method
type CreditCardAuthorizationReason string

const (
	CreditCardAuthorizationReasonNone                     CreditCardAuthorizationReason = "none"
	CreditCardAuthorizationReasonInvalidAmount            CreditCardAuthorizationReason = "invalid_amount"
	CreditCardAuthorizationReasonInvalidCvv               CreditCardAuthorizationReason = "invalid_cvv"
	CreditCardAuthorizationReasonInvalidCcNumber          CreditCardAuthorizationReason = "invalid_cc_number"
	CreditCardAuthorizationReasonExpired                  CreditCardAuthorizationReason = "expired"
	CreditCardAuthorizationReasonRisk                     CreditCardAuthorizationReason = "risk"
	CreditCardAuthorizationReasonLostStolen               CreditCardAuthorizationReason = "lost_stolen"
	CreditCardAuthorizationReasonCallIssuer               CreditCardAuthorizationReason = "call_issuer"
	CreditCardAuthorizationReasonInvalidMerchantForCard   CreditCardAuthorizationReason = "invalid_merchant_for_card"
	CreditCardAuthorizationReasonUnsupportedPaymentMethod CreditCardAuthorizationReason = "unsupported_payment_method"
	CreditCardAuthorizationReasonProcessorServerError     CreditCardAuthorizationReason = "processor_server_error"
)

func (e CreditCardAuthorizationReason) ToPointer() *CreditCardAuthorizationReason {
	return &e
}

func (e *CreditCardAuthorizationReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_cc_number":
		fallthrough
	case "expired":
		fallthrough
	case "risk":
		fallthrough
	case "lost_stolen":
		fallthrough
	case "call_issuer":
		fallthrough
	case "invalid_merchant_for_card":
		fallthrough
	case "unsupported_payment_method":
		fallthrough
	case "processor_server_error":
		*e = CreditCardAuthorizationReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditCardAuthorizationReason: %v", v)
	}
}
