// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CreditCardAuthorizationViewAvsResponse string

const (
	CreditCardAuthorizationViewAvsResponseZero        CreditCardAuthorizationViewAvsResponse = "00"
	CreditCardAuthorizationViewAvsResponseOne         CreditCardAuthorizationViewAvsResponse = "01"
	CreditCardAuthorizationViewAvsResponseTwo         CreditCardAuthorizationViewAvsResponse = "02"
	CreditCardAuthorizationViewAvsResponseTen         CreditCardAuthorizationViewAvsResponse = "10"
	CreditCardAuthorizationViewAvsResponseEleven      CreditCardAuthorizationViewAvsResponse = "11"
	CreditCardAuthorizationViewAvsResponseTwelve      CreditCardAuthorizationViewAvsResponse = "12"
	CreditCardAuthorizationViewAvsResponseThirteen    CreditCardAuthorizationViewAvsResponse = "13"
	CreditCardAuthorizationViewAvsResponseFourteen    CreditCardAuthorizationViewAvsResponse = "14"
	CreditCardAuthorizationViewAvsResponseTwenty      CreditCardAuthorizationViewAvsResponse = "20"
	CreditCardAuthorizationViewAvsResponseThirty      CreditCardAuthorizationViewAvsResponse = "30"
	CreditCardAuthorizationViewAvsResponseThirtyOne   CreditCardAuthorizationViewAvsResponse = "31"
	CreditCardAuthorizationViewAvsResponseThirtyTwo   CreditCardAuthorizationViewAvsResponse = "32"
	CreditCardAuthorizationViewAvsResponseThirtyThree CreditCardAuthorizationViewAvsResponse = "33"
	CreditCardAuthorizationViewAvsResponseThirtyFour  CreditCardAuthorizationViewAvsResponse = "34"
	CreditCardAuthorizationViewAvsResponseForty       CreditCardAuthorizationViewAvsResponse = "40"
	CreditCardAuthorizationViewAvsResponseAdyen       CreditCardAuthorizationViewAvsResponse = "adyen_"
	CreditCardAuthorizationViewAvsResponseAdyenA      CreditCardAuthorizationViewAvsResponse = "adyen_A"
	CreditCardAuthorizationViewAvsResponseAdyenN      CreditCardAuthorizationViewAvsResponse = "adyen_N"
	CreditCardAuthorizationViewAvsResponseAdyenU      CreditCardAuthorizationViewAvsResponse = "adyen_U"
	CreditCardAuthorizationViewAvsResponseAdyenS      CreditCardAuthorizationViewAvsResponse = "adyen_S"
	CreditCardAuthorizationViewAvsResponseAdyenR      CreditCardAuthorizationViewAvsResponse = "adyen_R"
	CreditCardAuthorizationViewAvsResponseAdyenW      CreditCardAuthorizationViewAvsResponse = "adyen_W"
	CreditCardAuthorizationViewAvsResponseAdyenT      CreditCardAuthorizationViewAvsResponse = "adyen_T"
	CreditCardAuthorizationViewAvsResponseAdyenZ      CreditCardAuthorizationViewAvsResponse = "adyen_Z"
	CreditCardAuthorizationViewAvsResponseAdyenD      CreditCardAuthorizationViewAvsResponse = "adyen_D"
	CreditCardAuthorizationViewAvsResponseAdyenF      CreditCardAuthorizationViewAvsResponse = "adyen_F"
	CreditCardAuthorizationViewAvsResponseAdyenM      CreditCardAuthorizationViewAvsResponse = "adyen_M"
	CreditCardAuthorizationViewAvsResponseAdyenX      CreditCardAuthorizationViewAvsResponse = "adyen_X"
	CreditCardAuthorizationViewAvsResponseAdyenY      CreditCardAuthorizationViewAvsResponse = "adyen_Y"
	CreditCardAuthorizationViewAvsResponseAdyenB      CreditCardAuthorizationViewAvsResponse = "adyen_B"
	CreditCardAuthorizationViewAvsResponseAdyenP      CreditCardAuthorizationViewAvsResponse = "adyen_P"
	CreditCardAuthorizationViewAvsResponseAdyenC      CreditCardAuthorizationViewAvsResponse = "adyen_C"
	CreditCardAuthorizationViewAvsResponseAdyenG      CreditCardAuthorizationViewAvsResponse = "adyen_G"
	CreditCardAuthorizationViewAvsResponseAdyenI      CreditCardAuthorizationViewAvsResponse = "adyen_I"
	CreditCardAuthorizationViewAvsResponseAdyenK      CreditCardAuthorizationViewAvsResponse = "adyen_K"
)

func (e CreditCardAuthorizationViewAvsResponse) ToPointer() *CreditCardAuthorizationViewAvsResponse {
	return &e
}

func (e *CreditCardAuthorizationViewAvsResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "00":
		fallthrough
	case "01":
		fallthrough
	case "02":
		fallthrough
	case "10":
		fallthrough
	case "11":
		fallthrough
	case "12":
		fallthrough
	case "13":
		fallthrough
	case "14":
		fallthrough
	case "20":
		fallthrough
	case "30":
		fallthrough
	case "31":
		fallthrough
	case "32":
		fallthrough
	case "33":
		fallthrough
	case "34":
		fallthrough
	case "40":
		fallthrough
	case "adyen_":
		fallthrough
	case "adyen_A":
		fallthrough
	case "adyen_N":
		fallthrough
	case "adyen_U":
		fallthrough
	case "adyen_S":
		fallthrough
	case "adyen_R":
		fallthrough
	case "adyen_W":
		fallthrough
	case "adyen_T":
		fallthrough
	case "adyen_Z":
		fallthrough
	case "adyen_D":
		fallthrough
	case "adyen_F":
		fallthrough
	case "adyen_M":
		fallthrough
	case "adyen_X":
		fallthrough
	case "adyen_Y":
		fallthrough
	case "adyen_B":
		fallthrough
	case "adyen_P":
		fallthrough
	case "adyen_C":
		fallthrough
	case "adyen_G":
		fallthrough
	case "adyen_I":
		fallthrough
	case "adyen_K":
		*e = CreditCardAuthorizationViewAvsResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditCardAuthorizationViewAvsResponse: %v", v)
	}
}

type CreditCardAuthorizationViewCvvResponse string

const (
	CreditCardAuthorizationViewCvvResponseM           CreditCardAuthorizationViewCvvResponse = "M"
	CreditCardAuthorizationViewCvvResponseN           CreditCardAuthorizationViewCvvResponse = "N"
	CreditCardAuthorizationViewCvvResponseP           CreditCardAuthorizationViewCvvResponse = "P"
	CreditCardAuthorizationViewCvvResponseS           CreditCardAuthorizationViewCvvResponse = "S"
	CreditCardAuthorizationViewCvvResponseU           CreditCardAuthorizationViewCvvResponse = "U"
	CreditCardAuthorizationViewCvvResponseD           CreditCardAuthorizationViewCvvResponse = "D"
	CreditCardAuthorizationViewCvvResponseX           CreditCardAuthorizationViewCvvResponse = "X"
	CreditCardAuthorizationViewCvvResponseY           CreditCardAuthorizationViewCvvResponse = "Y"
	CreditCardAuthorizationViewCvvResponseOne         CreditCardAuthorizationViewCvvResponse = "1"
	CreditCardAuthorizationViewCvvResponseTwo         CreditCardAuthorizationViewCvvResponse = "2"
	CreditCardAuthorizationViewCvvResponseThree       CreditCardAuthorizationViewCvvResponse = "3"
	CreditCardAuthorizationViewCvvResponsePass        CreditCardAuthorizationViewCvvResponse = "pass"
	CreditCardAuthorizationViewCvvResponseFail        CreditCardAuthorizationViewCvvResponse = "fail"
	CreditCardAuthorizationViewCvvResponseUnavailable CreditCardAuthorizationViewCvvResponse = "unavailable"
	CreditCardAuthorizationViewCvvResponseUnchecked   CreditCardAuthorizationViewCvvResponse = "unchecked"
	CreditCardAuthorizationViewCvvResponseBraintreeM  CreditCardAuthorizationViewCvvResponse = "braintree_M"
	CreditCardAuthorizationViewCvvResponseBraintreeN  CreditCardAuthorizationViewCvvResponse = "braintree_N"
	CreditCardAuthorizationViewCvvResponseBraintreeU  CreditCardAuthorizationViewCvvResponse = "braintree_U"
	CreditCardAuthorizationViewCvvResponseBraintreeB  CreditCardAuthorizationViewCvvResponse = "braintree_B"
	CreditCardAuthorizationViewCvvResponseBraintreeA  CreditCardAuthorizationViewCvvResponse = "braintree_A"
	CreditCardAuthorizationViewCvvResponseBraintreeI  CreditCardAuthorizationViewCvvResponse = "braintree_I"
	CreditCardAuthorizationViewCvvResponseBraintreeS  CreditCardAuthorizationViewCvvResponse = "braintree_S"
	CreditCardAuthorizationViewCvvResponseCvv2        CreditCardAuthorizationViewCvvResponse = "CVV2"
)

func (e CreditCardAuthorizationViewCvvResponse) ToPointer() *CreditCardAuthorizationViewCvvResponse {
	return &e
}

func (e *CreditCardAuthorizationViewCvvResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "M":
		fallthrough
	case "N":
		fallthrough
	case "P":
		fallthrough
	case "S":
		fallthrough
	case "U":
		fallthrough
	case "D":
		fallthrough
	case "X":
		fallthrough
	case "Y":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "pass":
		fallthrough
	case "fail":
		fallthrough
	case "unavailable":
		fallthrough
	case "unchecked":
		fallthrough
	case "braintree_M":
		fallthrough
	case "braintree_N":
		fallthrough
	case "braintree_U":
		fallthrough
	case "braintree_B":
		fallthrough
	case "braintree_A":
		fallthrough
	case "braintree_I":
		fallthrough
	case "braintree_S":
		fallthrough
	case "CVV2":
		*e = CreditCardAuthorizationViewCvvResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditCardAuthorizationViewCvvResponse: %v", v)
	}
}

type CreditCardAuthorizationViewProcessor string

const (
	CreditCardAuthorizationViewProcessorVantiv          CreditCardAuthorizationViewProcessor = "vantiv"
	CreditCardAuthorizationViewProcessorAdyenPayfac     CreditCardAuthorizationViewProcessor = "adyen_payfac"
	CreditCardAuthorizationViewProcessorAdyenGateway    CreditCardAuthorizationViewProcessor = "adyen_gateway"
	CreditCardAuthorizationViewProcessorStripe          CreditCardAuthorizationViewProcessor = "stripe"
	CreditCardAuthorizationViewProcessorBraintree       CreditCardAuthorizationViewProcessor = "braintree"
	CreditCardAuthorizationViewProcessorCybersource     CreditCardAuthorizationViewProcessor = "cybersource"
	CreditCardAuthorizationViewProcessorNmi             CreditCardAuthorizationViewProcessor = "nmi"
	CreditCardAuthorizationViewProcessorAuthorizeNet    CreditCardAuthorizationViewProcessor = "authorize_net"
	CreditCardAuthorizationViewProcessorRadial          CreditCardAuthorizationViewProcessor = "radial"
	CreditCardAuthorizationViewProcessorShopifyPayments CreditCardAuthorizationViewProcessor = "shopify_payments"
	CreditCardAuthorizationViewProcessorRocketgate      CreditCardAuthorizationViewProcessor = "rocketgate"
)

func (e CreditCardAuthorizationViewProcessor) ToPointer() *CreditCardAuthorizationViewProcessor {
	return &e
}

func (e *CreditCardAuthorizationViewProcessor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vantiv":
		fallthrough
	case "adyen_payfac":
		fallthrough
	case "adyen_gateway":
		fallthrough
	case "stripe":
		fallthrough
	case "braintree":
		fallthrough
	case "cybersource":
		fallthrough
	case "nmi":
		fallthrough
	case "authorize_net":
		fallthrough
	case "radial":
		fallthrough
	case "shopify_payments":
		fallthrough
	case "rocketgate":
		*e = CreditCardAuthorizationViewProcessor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditCardAuthorizationViewProcessor: %v", v)
	}
}

type CreditCardAuthorizationView struct {
	Auth        *string                                 `json:"auth,omitempty"`
	AvsResponse *CreditCardAuthorizationViewAvsResponse `json:"avs_response,omitempty"`
	CvvResponse *CreditCardAuthorizationViewCvvResponse `json:"cvv_response,omitempty"`
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string                               `json:"merchant_event_id,omitempty"`
	Metadata        map[string]string                     `json:"metadata,omitempty"`
	Processor       *CreditCardAuthorizationViewProcessor `json:"processor,omitempty"`
	// The reason code explaining the authorization status.
	//   * `1` - none
	//   * `2` - invalid_amount
	//   * `3` - invalid_cvv
	//   * `4` - invalid_cc_number
	//   * `5` - expired
	//   * `6` - risk
	//   * `7` - lost_stolen
	//   * `8` - call_issuer
	//   * `9` - invalid_merchant_for_card
	//   * `10` - unsupported_payment_method
	//
	Reason *CreditCardAuthorizationReason `json:"reason,omitempty"`
	// The status of the authorization request.
	//   * `1` - succeeded
	//   * `2` - declined
	//   * `3` - error
	//
	Status *CreditCardAuthorizationStatus `json:"status,omitempty"`
}

func (o *CreditCardAuthorizationView) GetAuth() *string {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *CreditCardAuthorizationView) GetAvsResponse() *CreditCardAuthorizationViewAvsResponse {
	if o == nil {
		return nil
	}
	return o.AvsResponse
}

func (o *CreditCardAuthorizationView) GetCvvResponse() *CreditCardAuthorizationViewCvvResponse {
	if o == nil {
		return nil
	}
	return o.CvvResponse
}

func (o *CreditCardAuthorizationView) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *CreditCardAuthorizationView) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreditCardAuthorizationView) GetProcessor() *CreditCardAuthorizationViewProcessor {
	if o == nil {
		return nil
	}
	return o.Processor
}

func (o *CreditCardAuthorizationView) GetReason() *CreditCardAuthorizationReason {
	if o == nil {
		return nil
	}
	return o.Reason
}

func (o *CreditCardAuthorizationView) GetStatus() *CreditCardAuthorizationStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
