// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AvsResponse string

const (
	AvsResponseZero        AvsResponse = "00"
	AvsResponseOne         AvsResponse = "01"
	AvsResponseTwo         AvsResponse = "02"
	AvsResponseTen         AvsResponse = "10"
	AvsResponseEleven      AvsResponse = "11"
	AvsResponseTwelve      AvsResponse = "12"
	AvsResponseThirteen    AvsResponse = "13"
	AvsResponseFourteen    AvsResponse = "14"
	AvsResponseTwenty      AvsResponse = "20"
	AvsResponseThirty      AvsResponse = "30"
	AvsResponseThirtyOne   AvsResponse = "31"
	AvsResponseThirtyTwo   AvsResponse = "32"
	AvsResponseThirtyThree AvsResponse = "33"
	AvsResponseThirtyFour  AvsResponse = "34"
	AvsResponseForty       AvsResponse = "40"
	AvsResponseAdyen       AvsResponse = "adyen_"
	AvsResponseAdyenA      AvsResponse = "adyen_A"
	AvsResponseAdyenN      AvsResponse = "adyen_N"
	AvsResponseAdyenU      AvsResponse = "adyen_U"
	AvsResponseAdyenS      AvsResponse = "adyen_S"
	AvsResponseAdyenR      AvsResponse = "adyen_R"
	AvsResponseAdyenW      AvsResponse = "adyen_W"
	AvsResponseAdyenT      AvsResponse = "adyen_T"
	AvsResponseAdyenZ      AvsResponse = "adyen_Z"
	AvsResponseAdyenD      AvsResponse = "adyen_D"
	AvsResponseAdyenF      AvsResponse = "adyen_F"
	AvsResponseAdyenM      AvsResponse = "adyen_M"
	AvsResponseAdyenX      AvsResponse = "adyen_X"
	AvsResponseAdyenY      AvsResponse = "adyen_Y"
	AvsResponseAdyenB      AvsResponse = "adyen_B"
	AvsResponseAdyenP      AvsResponse = "adyen_P"
	AvsResponseAdyenC      AvsResponse = "adyen_C"
	AvsResponseAdyenG      AvsResponse = "adyen_G"
	AvsResponseAdyenI      AvsResponse = "adyen_I"
	AvsResponseAdyenK      AvsResponse = "adyen_K"
)

func (e AvsResponse) ToPointer() *AvsResponse {
	return &e
}

func (e *AvsResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "00":
		fallthrough
	case "01":
		fallthrough
	case "02":
		fallthrough
	case "10":
		fallthrough
	case "11":
		fallthrough
	case "12":
		fallthrough
	case "13":
		fallthrough
	case "14":
		fallthrough
	case "20":
		fallthrough
	case "30":
		fallthrough
	case "31":
		fallthrough
	case "32":
		fallthrough
	case "33":
		fallthrough
	case "34":
		fallthrough
	case "40":
		fallthrough
	case "adyen_":
		fallthrough
	case "adyen_A":
		fallthrough
	case "adyen_N":
		fallthrough
	case "adyen_U":
		fallthrough
	case "adyen_S":
		fallthrough
	case "adyen_R":
		fallthrough
	case "adyen_W":
		fallthrough
	case "adyen_T":
		fallthrough
	case "adyen_Z":
		fallthrough
	case "adyen_D":
		fallthrough
	case "adyen_F":
		fallthrough
	case "adyen_M":
		fallthrough
	case "adyen_X":
		fallthrough
	case "adyen_Y":
		fallthrough
	case "adyen_B":
		fallthrough
	case "adyen_P":
		fallthrough
	case "adyen_C":
		fallthrough
	case "adyen_G":
		fallthrough
	case "adyen_I":
		fallthrough
	case "adyen_K":
		*e = AvsResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvsResponse: %v", v)
	}
}

type CvvResponse string

const (
	CvvResponseM           CvvResponse = "M"
	CvvResponseN           CvvResponse = "N"
	CvvResponseP           CvvResponse = "P"
	CvvResponseS           CvvResponse = "S"
	CvvResponseU           CvvResponse = "U"
	CvvResponseD           CvvResponse = "D"
	CvvResponseX           CvvResponse = "X"
	CvvResponseY           CvvResponse = "Y"
	CvvResponseOne         CvvResponse = "1"
	CvvResponseTwo         CvvResponse = "2"
	CvvResponseThree       CvvResponse = "3"
	CvvResponsePass        CvvResponse = "pass"
	CvvResponseFail        CvvResponse = "fail"
	CvvResponseUnavailable CvvResponse = "unavailable"
	CvvResponseUnchecked   CvvResponse = "unchecked"
	CvvResponseBraintreeM  CvvResponse = "braintree_M"
	CvvResponseBraintreeN  CvvResponse = "braintree_N"
	CvvResponseBraintreeU  CvvResponse = "braintree_U"
	CvvResponseBraintreeB  CvvResponse = "braintree_B"
	CvvResponseBraintreeA  CvvResponse = "braintree_A"
	CvvResponseBraintreeI  CvvResponse = "braintree_I"
	CvvResponseBraintreeS  CvvResponse = "braintree_S"
	CvvResponseCvv2        CvvResponse = "CVV2"
)

func (e CvvResponse) ToPointer() *CvvResponse {
	return &e
}

func (e *CvvResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "M":
		fallthrough
	case "N":
		fallthrough
	case "P":
		fallthrough
	case "S":
		fallthrough
	case "U":
		fallthrough
	case "D":
		fallthrough
	case "X":
		fallthrough
	case "Y":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "pass":
		fallthrough
	case "fail":
		fallthrough
	case "unavailable":
		fallthrough
	case "unchecked":
		fallthrough
	case "braintree_M":
		fallthrough
	case "braintree_N":
		fallthrough
	case "braintree_U":
		fallthrough
	case "braintree_B":
		fallthrough
	case "braintree_A":
		fallthrough
	case "braintree_I":
		fallthrough
	case "braintree_S":
		fallthrough
	case "CVV2":
		*e = CvvResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CvvResponse: %v", v)
	}
}

type Processor string

const (
	ProcessorVantiv          Processor = "vantiv"
	ProcessorAdyenPayfac     Processor = "adyen_payfac"
	ProcessorAdyenGateway    Processor = "adyen_gateway"
	ProcessorStripe          Processor = "stripe"
	ProcessorBraintree       Processor = "braintree"
	ProcessorCybersource     Processor = "cybersource"
	ProcessorNmi             Processor = "nmi"
	ProcessorAuthorizeNet    Processor = "authorize_net"
	ProcessorRadial          Processor = "radial"
	ProcessorShopifyPayments Processor = "shopify_payments"
	ProcessorRocketgate      Processor = "rocketgate"
)

func (e Processor) ToPointer() *Processor {
	return &e
}

func (e *Processor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vantiv":
		fallthrough
	case "adyen_payfac":
		fallthrough
	case "adyen_gateway":
		fallthrough
	case "stripe":
		fallthrough
	case "braintree":
		fallthrough
	case "cybersource":
		fallthrough
	case "nmi":
		fallthrough
	case "authorize_net":
		fallthrough
	case "radial":
		fallthrough
	case "shopify_payments":
		fallthrough
	case "rocketgate":
		*e = Processor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Processor: %v", v)
	}
}

type CreditCardAuthorizationView struct {
	Auth        *string      `json:"auth,omitempty"`
	AvsResponse *AvsResponse `json:"avs_response,omitempty"`
	CvvResponse *CvvResponse `json:"cvv_response,omitempty"`
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string           `json:"merchant_event_id,omitempty"`
	Metadata        map[string]string `json:"metadata,omitempty"`
	Processor       *Processor        `json:"processor,omitempty"`
	// The reason code explaining the authorization status.
	//   * `1` - none
	//   * `2` - invalid_amount
	//   * `3` - invalid_cvv
	//   * `4` - invalid_cc_number
	//   * `5` - expired
	//   * `6` - risk
	//   * `7` - lost_stolen
	//   * `8` - call_issuer
	//   * `9` - invalid_merchant_for_card
	//   * `10` - unsupported_payment_method
	//
	Reason *CreditCardAuthorizationReason `json:"reason,omitempty"`
	// The status of the authorization request.
	//   * `1` - succeeded
	//   * `2` - declined
	//   * `3` - error
	//
	Status *CreditCardAuthorizationStatus `json:"status,omitempty"`
}

func (o *CreditCardAuthorizationView) GetAuth() *string {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *CreditCardAuthorizationView) GetAvsResponse() *AvsResponse {
	if o == nil {
		return nil
	}
	return o.AvsResponse
}

func (o *CreditCardAuthorizationView) GetCvvResponse() *CvvResponse {
	if o == nil {
		return nil
	}
	return o.CvvResponse
}

func (o *CreditCardAuthorizationView) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *CreditCardAuthorizationView) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreditCardAuthorizationView) GetProcessor() *Processor {
	if o == nil {
		return nil
	}
	return o.Processor
}

func (o *CreditCardAuthorizationView) GetReason() *CreditCardAuthorizationReason {
	if o == nil {
		return nil
	}
	return o.Reason
}

func (o *CreditCardAuthorizationView) GetStatus() *CreditCardAuthorizationStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
