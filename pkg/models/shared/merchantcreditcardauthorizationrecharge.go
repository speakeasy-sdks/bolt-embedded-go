// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MerchantCreditCardAuthorizationRechargeSource string

const (
	MerchantCreditCardAuthorizationRechargeSourceDirectPayments MerchantCreditCardAuthorizationRechargeSource = "direct_payments"
)

func (e MerchantCreditCardAuthorizationRechargeSource) ToPointer() *MerchantCreditCardAuthorizationRechargeSource {
	return &e
}

func (e *MerchantCreditCardAuthorizationRechargeSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "direct_payments":
		*e = MerchantCreditCardAuthorizationRechargeSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MerchantCreditCardAuthorizationRechargeSource: %v", v)
	}
}

// MerchantCreditCardAuthorizationRecharge - This request is used for authorizing an existing, saved card associated with the account.
type MerchantCreditCardAuthorizationRecharge struct {
	AutoCapture *bool      `json:"auto_capture,omitempty"`
	Cart        CartCreate `json:"cart"`
	// The unique ID associated to the saved credit card in the account's wallet.
	CreditCardID string `json:"credit_card_id"`
	// The unique ID associated to the merchant's Bolt Account division; Merchants can have different divisions to suit multiple use cases (storefronts, pay-by-link, phone order processing). Use the Bolt Merchant Dashboard to switch between divisions and find the division ID under `Merchant Division Public ID`.
	DivisionID string `json:"division_id"`
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string `json:"merchant_event_id,omitempty"`
	// The unique ID associated with to the shopper's previous subscription-based transaction. Leave `null` for standard, non-subscription transactions.
	PreviousTransactionID *string `json:"previous_transaction_id,omitempty"`
	// Defines which payment method was used to initiate the transaction.
	ProcessingInitiator *ProcessingInitiator `json:"processing_initiator,omitempty"`
	// The Address object is used for billing, shipping, and physical store address use cases.
	ShippingAddress *Address                                      `json:"shipping_address,omitempty"`
	Source          MerchantCreditCardAuthorizationRechargeSource `json:"source"`
	// The object containing key lookup IDs associated with the shopper's account, such as the unique email address and phone number.
	UserIdentifier UserIdentifier `json:"user_identifier"`
	UserIdentity   UserIdentity   `json:"user_identity"`
}

func (o *MerchantCreditCardAuthorizationRecharge) GetAutoCapture() *bool {
	if o == nil {
		return nil
	}
	return o.AutoCapture
}

func (o *MerchantCreditCardAuthorizationRecharge) GetCart() CartCreate {
	if o == nil {
		return CartCreate{}
	}
	return o.Cart
}

func (o *MerchantCreditCardAuthorizationRecharge) GetCreditCardID() string {
	if o == nil {
		return ""
	}
	return o.CreditCardID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetDivisionID() string {
	if o == nil {
		return ""
	}
	return o.DivisionID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetPreviousTransactionID() *string {
	if o == nil {
		return nil
	}
	return o.PreviousTransactionID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetProcessingInitiator() *ProcessingInitiator {
	if o == nil {
		return nil
	}
	return o.ProcessingInitiator
}

func (o *MerchantCreditCardAuthorizationRecharge) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *MerchantCreditCardAuthorizationRecharge) GetSource() MerchantCreditCardAuthorizationRechargeSource {
	if o == nil {
		return MerchantCreditCardAuthorizationRechargeSource("")
	}
	return o.Source
}

func (o *MerchantCreditCardAuthorizationRecharge) GetUserIdentifier() UserIdentifier {
	if o == nil {
		return UserIdentifier{}
	}
	return o.UserIdentifier
}

func (o *MerchantCreditCardAuthorizationRecharge) GetUserIdentity() UserIdentity {
	if o == nil {
		return UserIdentity{}
	}
	return o.UserIdentity
}
