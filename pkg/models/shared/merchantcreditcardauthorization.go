// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MerchantCreditCardAuthorizationProcessingInitiator - Determines who initiated the transaction (e.g. shopper, merchant) and how they did it (e.g. recurring subscription, on-file card).
//
// * `initial_card_on_file` - The first transaction made for a card. The system then saves this card for future transactions.
// * `initial_recurring` - The first time any card is used to pay for a recurring charge. For example, a subscription.
// * `stored_cardholder_initiated` - The subsequent (second, third, etc.) transactions a shopper initiates with a stored card. This includes every situation during which a cardholder requests a charge, for example if the cardholder requests a merchant charge their card.
// * `stored_merchant_initiated` - The subsequent (second, third, etc.) transactions a merchant initiates with a stored card only when the cardholder does not request the charge. For example, when a customer service representative buys on behalf of a shopper or when a business adds funds to a public transit card.
// * `following_recurring` - The subsequent (second, third, etc.) transactions  a card is used to pay for a recurring charge. For example, a subscription.
// * `cardholder_initiated` - When a cardholder begins a transaction that isn’t stored in Bolt and won’t be stored in Bolt for future transactions.
// * `recurring` - Any time a card is used to pay for a recurring charge (for example, a subscription). Only use this value when you don’t know if it’s the first recurring charge.
type MerchantCreditCardAuthorizationProcessingInitiator string

const (
	MerchantCreditCardAuthorizationProcessingInitiatorInitialCardOnFile         MerchantCreditCardAuthorizationProcessingInitiator = "initial_card_on_file"
	MerchantCreditCardAuthorizationProcessingInitiatorInitialRecurring          MerchantCreditCardAuthorizationProcessingInitiator = "initial_recurring"
	MerchantCreditCardAuthorizationProcessingInitiatorStoredCardholderInitiated MerchantCreditCardAuthorizationProcessingInitiator = "stored_cardholder_initiated"
	MerchantCreditCardAuthorizationProcessingInitiatorStoredMerchantInitiated   MerchantCreditCardAuthorizationProcessingInitiator = "stored_merchant_initiated"
	MerchantCreditCardAuthorizationProcessingInitiatorFollowingRecurring        MerchantCreditCardAuthorizationProcessingInitiator = "following_recurring"
	MerchantCreditCardAuthorizationProcessingInitiatorCardholderInitiated       MerchantCreditCardAuthorizationProcessingInitiator = "cardholder_initiated"
	MerchantCreditCardAuthorizationProcessingInitiatorRecurring                 MerchantCreditCardAuthorizationProcessingInitiator = "recurring"
)

func (e MerchantCreditCardAuthorizationProcessingInitiator) ToPointer() *MerchantCreditCardAuthorizationProcessingInitiator {
	return &e
}

func (e *MerchantCreditCardAuthorizationProcessingInitiator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initial_card_on_file":
		fallthrough
	case "initial_recurring":
		fallthrough
	case "stored_cardholder_initiated":
		fallthrough
	case "stored_merchant_initiated":
		fallthrough
	case "following_recurring":
		fallthrough
	case "cardholder_initiated":
		fallthrough
	case "recurring":
		*e = MerchantCreditCardAuthorizationProcessingInitiator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MerchantCreditCardAuthorizationProcessingInitiator: %v", v)
	}
}

type MerchantCreditCardAuthorizationSource string

const (
	MerchantCreditCardAuthorizationSourceDirectPayments MerchantCreditCardAuthorizationSource = "direct_payments"
)

func (e MerchantCreditCardAuthorizationSource) ToPointer() *MerchantCreditCardAuthorizationSource {
	return &e
}

func (e *MerchantCreditCardAuthorizationSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "direct_payments":
		*e = MerchantCreditCardAuthorizationSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MerchantCreditCardAuthorizationSource: %v", v)
	}
}

// MerchantCreditCardAuthorizationRecharge - This request is used for authorizing an existing, saved card associated with the account.
type MerchantCreditCardAuthorizationRecharge struct {
	AutoCapture *bool      `json:"auto_capture,omitempty"`
	Cart        CartCreate `json:"cart"`
	// The unique ID associated to the saved credit card in the account's wallet.
	CreditCardID string `json:"credit_card_id"`
	// The unique ID associated to the merchant's Bolt Account division; Merchants can have different divisions to suit multiple use cases (storefronts, pay-by-link, phone order processing). Use the Bolt Merchant Dashboard to switch between divisions and find the division ID under `Merchant Division Public ID`.
	DivisionID string `json:"division_id"`
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string `json:"merchant_event_id,omitempty"`
	// The unique ID associated with to the shopper's previous subscription-based transaction. Leave `null` for standard, non-subscription transactions.
	PreviousTransactionID *string `json:"previous_transaction_id,omitempty"`
	// Defines which payment method was used to initiate the transaction.
	ProcessingInitiator *ProcessingInitiator `json:"processing_initiator,omitempty"`
	// The Address object is used for billing, shipping, and physical store address use cases.
	ShippingAddress *Address                                      `json:"shipping_address,omitempty"`
	Source          MerchantCreditCardAuthorizationRechargeSource `json:"source"`
	// The object containing key lookup IDs associated with the shopper's account, such as the unique email address and phone number.
	UserIdentifier UserIdentifier `json:"user_identifier"`
	UserIdentity   UserIdentity   `json:"user_identity"`
}

func (o *MerchantCreditCardAuthorizationRecharge) GetAutoCapture() *bool {
	if o == nil {
		return nil
	}
	return o.AutoCapture
}

func (o *MerchantCreditCardAuthorizationRecharge) GetCart() CartCreate {
	if o == nil {
		return CartCreate{}
	}
	return o.Cart
}

func (o *MerchantCreditCardAuthorizationRecharge) GetCreditCardID() string {
	if o == nil {
		return ""
	}
	return o.CreditCardID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetDivisionID() string {
	if o == nil {
		return ""
	}
	return o.DivisionID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetPreviousTransactionID() *string {
	if o == nil {
		return nil
	}
	return o.PreviousTransactionID
}

func (o *MerchantCreditCardAuthorizationRecharge) GetProcessingInitiator() *ProcessingInitiator {
	if o == nil {
		return nil
	}
	return o.ProcessingInitiator
}

func (o *MerchantCreditCardAuthorizationRecharge) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *MerchantCreditCardAuthorizationRecharge) GetSource() MerchantCreditCardAuthorizationRechargeSource {
	if o == nil {
		return MerchantCreditCardAuthorizationRechargeSource("")
	}
	return o.Source
}

func (o *MerchantCreditCardAuthorizationRecharge) GetUserIdentifier() UserIdentifier {
	if o == nil {
		return UserIdentifier{}
	}
	return o.UserIdentifier
}

func (o *MerchantCreditCardAuthorizationRecharge) GetUserIdentity() UserIdentity {
	if o == nil {
		return UserIdentity{}
	}
	return o.UserIdentity
}
