// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SubscriptionFrequencyUnit - The unit for this subscription's frequency.
type SubscriptionFrequencyUnit string

const (
	SubscriptionFrequencyUnitDay   SubscriptionFrequencyUnit = "day"
	SubscriptionFrequencyUnitWeek  SubscriptionFrequencyUnit = "week"
	SubscriptionFrequencyUnitMonth SubscriptionFrequencyUnit = "month"
	SubscriptionFrequencyUnitYear  SubscriptionFrequencyUnit = "year"
)

func (e SubscriptionFrequencyUnit) ToPointer() *SubscriptionFrequencyUnit {
	return &e
}

func (e *SubscriptionFrequencyUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "month":
		fallthrough
	case "year":
		*e = SubscriptionFrequencyUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionFrequencyUnit: %v", v)
	}
}

// SubscriptionFrequency - Describes how often the subscription recurs.
type SubscriptionFrequency struct {
	// The unit for this subscription's frequency.
	Unit *SubscriptionFrequencyUnit `json:"unit,omitempty"`
	// The value applied to the unit frequency.
	Value *int64 `json:"value,omitempty"`
}

func (o *SubscriptionFrequency) GetUnit() *SubscriptionFrequencyUnit {
	if o == nil {
		return nil
	}
	return o.Unit
}

func (o *SubscriptionFrequency) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

// Subscription - Describes a product added as a recurring subscription.
type Subscription struct {
	// Describes how often the subscription recurs.
	Frequency *SubscriptionFrequency `json:"frequency,omitempty"`
}

func (o *Subscription) GetFrequency() *SubscriptionFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}
