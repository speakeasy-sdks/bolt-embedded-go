// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransactionIndemnificationReason - Describes the reason that the transaction is or is not indemnified by Bolt for fraud.
type TransactionIndemnificationReason string

const (
	TransactionIndemnificationReasonUnknown                  TransactionIndemnificationReason = "unknown"
	TransactionIndemnificationReasonCheckout                 TransactionIndemnificationReason = "checkout"
	TransactionIndemnificationReasonVirtualTerminal          TransactionIndemnificationReason = "virtual_terminal"
	TransactionIndemnificationReasonMerchantBackOffice       TransactionIndemnificationReason = "merchant_back_office"
	TransactionIndemnificationReasonMerchantForceApproved    TransactionIndemnificationReason = "merchant_force_approved"
	TransactionIndemnificationReasonReversiblyRejected       TransactionIndemnificationReason = "reversibly_rejected"
	TransactionIndemnificationReasonIrreversiblyRejected     TransactionIndemnificationReason = "irreversibly_rejected"
	TransactionIndemnificationReasonRiskEngineApproved       TransactionIndemnificationReason = "risk_engine_approved"
	TransactionIndemnificationReasonAnalystApproved          TransactionIndemnificationReason = "analyst_approved"
	TransactionIndemnificationReasonAuthVerification         TransactionIndemnificationReason = "auth_verification"
	TransactionIndemnificationReasonPaypal                   TransactionIndemnificationReason = "paypal"
	TransactionIndemnificationReasonAfterpay                 TransactionIndemnificationReason = "afterpay"
	TransactionIndemnificationReasonDirectPayments           TransactionIndemnificationReason = "direct_payments"
	TransactionIndemnificationReasonWhitelist                TransactionIndemnificationReason = "whitelist"
	TransactionIndemnificationReasonExternalReview           TransactionIndemnificationReason = "external_review"
	TransactionIndemnificationReasonAffirm                   TransactionIndemnificationReason = "affirm"
	TransactionIndemnificationReasonMerchantIPAddress        TransactionIndemnificationReason = "merchant_ip_address"
	TransactionIndemnificationReasonAmazonPay                TransactionIndemnificationReason = "amazon_pay"
	TransactionIndemnificationReasonApplePay                 TransactionIndemnificationReason = "apple_pay"
	TransactionIndemnificationReasonPhoneOrder               TransactionIndemnificationReason = "phone_order"
	TransactionIndemnificationReasonKlarna                   TransactionIndemnificationReason = "klarna"
	TransactionIndemnificationReasonCardholderAuthentication TransactionIndemnificationReason = "cardholder_authentication"
	TransactionIndemnificationReasonAddressChangeRejected    TransactionIndemnificationReason = "address_change_rejected"
	TransactionIndemnificationReasonIndemnifyDirectPayments  TransactionIndemnificationReason = "indemnify_direct_payments"
	TransactionIndemnificationReasonIndemnifyVirtualTerminal TransactionIndemnificationReason = "indemnify_virtual_terminal"
	TransactionIndemnificationReasonMembershipSubscription   TransactionIndemnificationReason = "membership_subscription"
	TransactionIndemnificationReasonEmbeddedGuestCheckout    TransactionIndemnificationReason = "embedded_guest_checkout"
	TransactionIndemnificationReasonRiskAssessmentOnly       TransactionIndemnificationReason = "risk_assessment_only"
	TransactionIndemnificationReasonSezzle                   TransactionIndemnificationReason = "sezzle"
	TransactionIndemnificationReasonCredova                  TransactionIndemnificationReason = "credova"
	TransactionIndemnificationReasonSubscription             TransactionIndemnificationReason = "subscription"
	TransactionIndemnificationReasonIndemnifyApmTransaction  TransactionIndemnificationReason = "indemnify_apm_transaction"
)

func (e TransactionIndemnificationReason) ToPointer() *TransactionIndemnificationReason {
	return &e
}

func (e *TransactionIndemnificationReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "checkout":
		fallthrough
	case "virtual_terminal":
		fallthrough
	case "merchant_back_office":
		fallthrough
	case "merchant_force_approved":
		fallthrough
	case "reversibly_rejected":
		fallthrough
	case "irreversibly_rejected":
		fallthrough
	case "risk_engine_approved":
		fallthrough
	case "analyst_approved":
		fallthrough
	case "auth_verification":
		fallthrough
	case "paypal":
		fallthrough
	case "afterpay":
		fallthrough
	case "direct_payments":
		fallthrough
	case "whitelist":
		fallthrough
	case "external_review":
		fallthrough
	case "affirm":
		fallthrough
	case "merchant_ip_address":
		fallthrough
	case "amazon_pay":
		fallthrough
	case "apple_pay":
		fallthrough
	case "phone_order":
		fallthrough
	case "klarna":
		fallthrough
	case "cardholder_authentication":
		fallthrough
	case "address_change_rejected":
		fallthrough
	case "indemnify_direct_payments":
		fallthrough
	case "indemnify_virtual_terminal":
		fallthrough
	case "membership_subscription":
		fallthrough
	case "embedded_guest_checkout":
		fallthrough
	case "risk_assessment_only":
		fallthrough
	case "sezzle":
		fallthrough
	case "credova":
		fallthrough
	case "subscription":
		fallthrough
	case "indemnify_apm_transaction":
		*e = TransactionIndemnificationReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionIndemnificationReason: %v", v)
	}
}
