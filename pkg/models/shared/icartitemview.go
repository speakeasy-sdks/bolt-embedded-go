// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Properties struct {
	Color   *string `json:"color,omitempty"`
	Display *bool   `json:"display,omitempty"`
	Name    *string `json:"name,omitempty"`
	Value   *string `json:"value,omitempty"`
}

func (o *Properties) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *Properties) GetDisplay() *bool {
	if o == nil {
		return nil
	}
	return o.Display
}

func (o *Properties) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Properties) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type ICartItemViewShipmentType string

const (
	ICartItemViewShipmentTypeUnknown        ICartItemViewShipmentType = "unknown"
	ICartItemViewShipmentTypeDoorDelivery   ICartItemViewShipmentType = "door_delivery"
	ICartItemViewShipmentTypeShipToStore    ICartItemViewShipmentType = "ship_to_store"
	ICartItemViewShipmentTypeInStorePickup  ICartItemViewShipmentType = "in_store_pickup"
	ICartItemViewShipmentTypeShipToHomeOnly ICartItemViewShipmentType = "ship_to_home_only"
)

func (e ICartItemViewShipmentType) ToPointer() *ICartItemViewShipmentType {
	return &e
}

func (e *ICartItemViewShipmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "door_delivery":
		fallthrough
	case "ship_to_store":
		fallthrough
	case "in_store_pickup":
		fallthrough
	case "ship_to_home_only":
		*e = ICartItemViewShipmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ICartItemViewShipmentType: %v", v)
	}
}

type ICartItemViewType string

const (
	ICartItemViewTypeUnknown  ICartItemViewType = "unknown"
	ICartItemViewTypeDigital  ICartItemViewType = "digital"
	ICartItemViewTypePhysical ICartItemViewType = "physical"
	ICartItemViewTypeBundled  ICartItemViewType = "bundled"
)

func (e ICartItemViewType) ToPointer() *ICartItemViewType {
	return &e
}

func (e *ICartItemViewType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "digital":
		fallthrough
	case "physical":
		fallthrough
	case "bundled":
		*e = ICartItemViewType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ICartItemViewType: %v", v)
	}
}

type ICartItemView struct {
	BoltProductID *string `json:"bolt_product_id,omitempty"`
	Brand         *string `json:"brand,omitempty"`
	// Used to define a product category associated with the item.
	Category    *string  `json:"category,omitempty"`
	Collections []string `json:"collections,omitempty"`
	// Used to define the color of the item.
	Color          *string                 `json:"color,omitempty"`
	Customizations []CartItemCustomization `json:"customizations,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	// Used to provide a link to the item's product page.
	DetailsURL *string `json:"details_url,omitempty"`
	// Defines which gift options are hidden.
	GiftOption *GiftOptionView `json:"gift_option,omitempty"`
	Hide       *bool           `json:"hide,omitempty"`
	// Used to provide a link to the image associated with the item.
	ImageURL *string `json:"image_url,omitempty"`
	// Used to define the International Standard Book Number associated with the book.
	Isbn      *string `json:"isbn,omitempty"`
	ItemGroup *string `json:"item_group,omitempty"`
	// Used to define the organization that manufactured the item.
	Manufacturer                   *string                    `json:"manufacturer,omitempty"`
	MerchantProductID              *string                    `json:"merchant_product_id,omitempty"`
	MerchantVariantID              *string                    `json:"merchant_variant_id,omitempty"`
	Msrp                           *AmountView                `json:"msrp,omitempty"`
	Name                           *string                    `json:"name,omitempty"`
	Options                        *string                    `json:"options,omitempty"`
	Properties                     []Properties               `json:"properties,omitempty"`
	Quantity                       *float64                   `json:"quantity,omitempty"`
	Reference                      *string                    `json:"reference,omitempty"`
	ShipmentID                     *string                    `json:"shipment_id,omitempty"`
	ShipmentType                   *ICartItemViewShipmentType `json:"shipment_type,omitempty"`
	ShopifyLineItemReference       *float64                   `json:"shopify_line_item_reference,omitempty"`
	ShopifyProductReference        *float64                   `json:"shopify_product_reference,omitempty"`
	ShopifyProductVariantReference *float64                   `json:"shopify_product_variant_reference,omitempty"`
	// Used to define the size of the item.
	Size *string `json:"size,omitempty"`
	// Used to define an alpha-numeric Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue.
	Sku *string `json:"sku,omitempty"`
	// Describes a product added as a recurring subscription.
	Subscription *Subscription `json:"subscription,omitempty"`
	// Used to define a comma-separated list of tags associated with the item.
	Tags        *string            `json:"tags,omitempty"`
	TaxAmount   *AmountView        `json:"tax_amount,omitempty"`
	Taxable     *bool              `json:"taxable,omitempty"`
	TotalAmount *AmountView        `json:"total_amount,omitempty"`
	Type        *ICartItemViewType `json:"type,omitempty"`
	UnitPrice   *AmountView        `json:"unit_price,omitempty"`
	// Used to define the unit of measure used to describe the product.
	Uom *string `json:"uom,omitempty"`
	// Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
	Upc    *string  `json:"upc,omitempty"`
	Weight *IWeight `json:"weight,omitempty"`
}

func (o *ICartItemView) GetBoltProductID() *string {
	if o == nil {
		return nil
	}
	return o.BoltProductID
}

func (o *ICartItemView) GetBrand() *string {
	if o == nil {
		return nil
	}
	return o.Brand
}

func (o *ICartItemView) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *ICartItemView) GetCollections() []string {
	if o == nil {
		return nil
	}
	return o.Collections
}

func (o *ICartItemView) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *ICartItemView) GetCustomizations() []CartItemCustomization {
	if o == nil {
		return nil
	}
	return o.Customizations
}

func (o *ICartItemView) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ICartItemView) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *ICartItemView) GetGiftOption() *GiftOptionView {
	if o == nil {
		return nil
	}
	return o.GiftOption
}

func (o *ICartItemView) GetHide() *bool {
	if o == nil {
		return nil
	}
	return o.Hide
}

func (o *ICartItemView) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *ICartItemView) GetIsbn() *string {
	if o == nil {
		return nil
	}
	return o.Isbn
}

func (o *ICartItemView) GetItemGroup() *string {
	if o == nil {
		return nil
	}
	return o.ItemGroup
}

func (o *ICartItemView) GetManufacturer() *string {
	if o == nil {
		return nil
	}
	return o.Manufacturer
}

func (o *ICartItemView) GetMerchantProductID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantProductID
}

func (o *ICartItemView) GetMerchantVariantID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantVariantID
}

func (o *ICartItemView) GetMsrp() *AmountView {
	if o == nil {
		return nil
	}
	return o.Msrp
}

func (o *ICartItemView) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ICartItemView) GetOptions() *string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *ICartItemView) GetProperties() []Properties {
	if o == nil {
		return nil
	}
	return o.Properties
}

func (o *ICartItemView) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ICartItemView) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *ICartItemView) GetShipmentID() *string {
	if o == nil {
		return nil
	}
	return o.ShipmentID
}

func (o *ICartItemView) GetShipmentType() *ICartItemViewShipmentType {
	if o == nil {
		return nil
	}
	return o.ShipmentType
}

func (o *ICartItemView) GetShopifyLineItemReference() *float64 {
	if o == nil {
		return nil
	}
	return o.ShopifyLineItemReference
}

func (o *ICartItemView) GetShopifyProductReference() *float64 {
	if o == nil {
		return nil
	}
	return o.ShopifyProductReference
}

func (o *ICartItemView) GetShopifyProductVariantReference() *float64 {
	if o == nil {
		return nil
	}
	return o.ShopifyProductVariantReference
}

func (o *ICartItemView) GetSize() *string {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ICartItemView) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *ICartItemView) GetSubscription() *Subscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *ICartItemView) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ICartItemView) GetTaxAmount() *AmountView {
	if o == nil {
		return nil
	}
	return o.TaxAmount
}

func (o *ICartItemView) GetTaxable() *bool {
	if o == nil {
		return nil
	}
	return o.Taxable
}

func (o *ICartItemView) GetTotalAmount() *AmountView {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *ICartItemView) GetType() *ICartItemViewType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ICartItemView) GetUnitPrice() *AmountView {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *ICartItemView) GetUom() *string {
	if o == nil {
		return nil
	}
	return o.Uom
}

func (o *ICartItemView) GetUpc() *string {
	if o == nil {
		return nil
	}
	return o.Upc
}

func (o *ICartItemView) GetWeight() *IWeight {
	if o == nil {
		return nil
	}
	return o.Weight
}
