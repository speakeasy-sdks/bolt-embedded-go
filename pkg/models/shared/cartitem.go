// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GiftOption - Contains the gift option settings for wrapping and custom messages.
type GiftOption struct {
	// The cost in cents.
	Cost *int64 `json:"cost,omitempty"`
	// The merchant's unique ID for the product.
	MerchantProductID *string `json:"merchant_product_id,omitempty"`
	// Includes the gift message written by the shopper.
	Message *string `json:"message,omitempty"`
	// Defines whether gift wrapping was requested.
	Wrap *bool `json:"wrap,omitempty"`
}

func (o *GiftOption) GetCost() *int64 {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *GiftOption) GetMerchantProductID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantProductID
}

func (o *GiftOption) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GiftOption) GetWrap() *bool {
	if o == nil {
		return nil
	}
	return o.Wrap
}

type ShipmentType string

const (
	ShipmentTypeUnknown       ShipmentType = "unknown"
	ShipmentTypeDoorDelivery  ShipmentType = "door_delivery"
	ShipmentTypeShipToStore   ShipmentType = "ship_to_store"
	ShipmentTypeInStorePickup ShipmentType = "in_store_pickup"
)

func (e ShipmentType) ToPointer() *ShipmentType {
	return &e
}

func (e *ShipmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "door_delivery":
		fallthrough
	case "ship_to_store":
		fallthrough
	case "in_store_pickup":
		*e = ShipmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipmentType: %v", v)
	}
}

type CartItemType string

const (
	CartItemTypeUnknown  CartItemType = "unknown"
	CartItemTypeDigital  CartItemType = "digital"
	CartItemTypePhysical CartItemType = "physical"
	CartItemTypeBundled  CartItemType = "bundled"
)

func (e CartItemType) ToPointer() *CartItemType {
	return &e
}

func (e *CartItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "digital":
		fallthrough
	case "physical":
		fallthrough
	case "bundled":
		*e = CartItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CartItemType: %v", v)
	}
}

type CartItem struct {
	Brand *string `json:"brand,omitempty"`
	// Used to define a product category associated with the item.
	Category    *string  `json:"category,omitempty"`
	Collections []string `json:"collections,omitempty"`
	// Used to define the color of the item.
	Color          *string                 `json:"color,omitempty"`
	Customizations []CartItemCustomization `json:"customizations,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	// Used to provide a link to the item's product page.
	DetailsURL     *string                  `json:"details_url,omitempty"`
	ExternalInputs *ICartItemExternalInputs `json:"external_inputs,omitempty"`
	// Contains the gift option settings for wrapping and custom messages.
	GiftOption *GiftOption `json:"gift_option,omitempty"`
	// Used to provide a link to the image associated with the item.
	ImageURL *string `json:"image_url,omitempty"`
	// Used to define the International Standard Book Number associated with the book.
	Isbn      *string `json:"isbn,omitempty"`
	ItemGroup *string `json:"item_group,omitempty"`
	// Used to define the organization that manufactured the item.
	Manufacturer *string `json:"manufacturer,omitempty"`
	// The merchant's unique ID for the product.
	MerchantProductID *string `json:"merchant_product_id,omitempty"`
	// A merchant's unique ID for a given product's specific variant.
	MerchantVariantID *string            `json:"merchant_variant_id,omitempty"`
	Msrp              *float64           `json:"msrp,omitempty"`
	Name              string             `json:"name"`
	Options           *string            `json:"options,omitempty"`
	Properties        []CartItemProperty `json:"properties,omitempty"`
	Quantity          float64            `json:"quantity"`
	Reference         string             `json:"reference"`
	// A cart that is being prepared for shipment
	Shipment     *CartShipment `json:"shipment,omitempty"`
	ShipmentType *ShipmentType `json:"shipment_type,omitempty"`
	// Used to define the size of the item.
	Size *string `json:"size,omitempty"`
	// Used to define the alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue.
	Sku    *string `json:"sku,omitempty"`
	Source *string `json:"source,omitempty"`
	// Used to define a comma-separated list of tags associated with the item.
	Tags *string `json:"tags,omitempty"`
	// The tax amount for the item; this value should scale with the quantity of units selected.
	TaxAmount *float64 `json:"tax_amount,omitempty"`
	TaxCode   *string  `json:"tax_code,omitempty"`
	Taxable   *bool    `json:"taxable,omitempty"`
	// The total amount, in cents, of the item including its taxes if applicable.
	TotalAmount float64       `json:"total_amount"`
	Type        *CartItemType `json:"type,omitempty"`
	// The price of one unit of the item; for example, the price of one pack of socks.
	UnitPrice float64 `json:"unit_price"`
	// Used to define the unit of measure used to describe the item.
	Uom *string `json:"uom,omitempty"`
	// Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
	Upc        *string  `json:"upc,omitempty"`
	Weight     *float64 `json:"weight,omitempty"`
	WeightUnit *string  `json:"weight_unit,omitempty"`
}

func (o *CartItem) GetBrand() *string {
	if o == nil {
		return nil
	}
	return o.Brand
}

func (o *CartItem) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *CartItem) GetCollections() []string {
	if o == nil {
		return nil
	}
	return o.Collections
}

func (o *CartItem) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *CartItem) GetCustomizations() []CartItemCustomization {
	if o == nil {
		return nil
	}
	return o.Customizations
}

func (o *CartItem) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CartItem) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *CartItem) GetExternalInputs() *ICartItemExternalInputs {
	if o == nil {
		return nil
	}
	return o.ExternalInputs
}

func (o *CartItem) GetGiftOption() *GiftOption {
	if o == nil {
		return nil
	}
	return o.GiftOption
}

func (o *CartItem) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CartItem) GetIsbn() *string {
	if o == nil {
		return nil
	}
	return o.Isbn
}

func (o *CartItem) GetItemGroup() *string {
	if o == nil {
		return nil
	}
	return o.ItemGroup
}

func (o *CartItem) GetManufacturer() *string {
	if o == nil {
		return nil
	}
	return o.Manufacturer
}

func (o *CartItem) GetMerchantProductID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantProductID
}

func (o *CartItem) GetMerchantVariantID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantVariantID
}

func (o *CartItem) GetMsrp() *float64 {
	if o == nil {
		return nil
	}
	return o.Msrp
}

func (o *CartItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CartItem) GetOptions() *string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *CartItem) GetProperties() []CartItemProperty {
	if o == nil {
		return nil
	}
	return o.Properties
}

func (o *CartItem) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *CartItem) GetReference() string {
	if o == nil {
		return ""
	}
	return o.Reference
}

func (o *CartItem) GetShipment() *CartShipment {
	if o == nil {
		return nil
	}
	return o.Shipment
}

func (o *CartItem) GetShipmentType() *ShipmentType {
	if o == nil {
		return nil
	}
	return o.ShipmentType
}

func (o *CartItem) GetSize() *string {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *CartItem) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *CartItem) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CartItem) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CartItem) GetTaxAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TaxAmount
}

func (o *CartItem) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *CartItem) GetTaxable() *bool {
	if o == nil {
		return nil
	}
	return o.Taxable
}

func (o *CartItem) GetTotalAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalAmount
}

func (o *CartItem) GetType() *CartItemType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CartItem) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *CartItem) GetUom() *string {
	if o == nil {
		return nil
	}
	return o.Uom
}

func (o *CartItem) GetUpc() *string {
	if o == nil {
		return nil
	}
	return o.Upc
}

func (o *CartItem) GetWeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

func (o *CartItem) GetWeightUnit() *string {
	if o == nil {
		return nil
	}
	return o.WeightUnit
}
