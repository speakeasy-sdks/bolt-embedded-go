// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TransactionSplitsViewType string

const (
	TransactionSplitsViewTypeNet           TransactionSplitsViewType = "net"
	TransactionSplitsViewTypeProcessingFee TransactionSplitsViewType = "processing_fee"
	TransactionSplitsViewTypeFloat         TransactionSplitsViewType = "float"
	TransactionSplitsViewTypeReserve       TransactionSplitsViewType = "reserve"
	TransactionSplitsViewTypeAdjustment    TransactionSplitsViewType = "adjustment"
	TransactionSplitsViewTypeBoltFee       TransactionSplitsViewType = "bolt_fee"
)

func (e TransactionSplitsViewType) ToPointer() *TransactionSplitsViewType {
	return &e
}

func (e *TransactionSplitsViewType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "net":
		fallthrough
	case "processing_fee":
		fallthrough
	case "float":
		fallthrough
	case "reserve":
		fallthrough
	case "adjustment":
		fallthrough
	case "bolt_fee":
		*e = TransactionSplitsViewType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionSplitsViewType: %v", v)
	}
}

type TransactionSplitsView struct {
	Amount *AmountView                `json:"amount,omitempty"`
	Type   *TransactionSplitsViewType `json:"type,omitempty"`
}

func (o *TransactionSplitsView) GetAmount() *AmountView {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransactionSplitsView) GetType() *TransactionSplitsViewType {
	if o == nil {
		return nil
	}
	return o.Type
}
