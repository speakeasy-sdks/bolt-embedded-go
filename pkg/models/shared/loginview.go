// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LoginViewActions string

const (
	LoginViewActionsSetPassword    LoginViewActions = "set_password"
	LoginViewActionsRotatePassword LoginViewActions = "rotate_password"
)

func (e LoginViewActions) ToPointer() *LoginViewActions {
	return &e
}

func (e *LoginViewActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "set_password":
		fallthrough
	case "rotate_password":
		*e = LoginViewActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoginViewActions: %v", v)
	}
}

type LoginViewMethods string

const (
	LoginViewMethodsCode           LoginViewMethods = "code"
	LoginViewMethodsCodePassword   LoginViewMethods = "code_password"
	LoginViewMethodsPassword       LoginViewMethods = "password"
	LoginViewMethodsRotatePassword LoginViewMethods = "rotate_password"
)

func (e LoginViewMethods) ToPointer() *LoginViewMethods {
	return &e
}

func (e *LoginViewMethods) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code":
		fallthrough
	case "code_password":
		fallthrough
	case "password":
		fallthrough
	case "rotate_password":
		*e = LoginViewMethods(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoginViewMethods: %v", v)
	}
}

type LoginView struct {
	Actions             []LoginViewActions `json:"actions,omitempty"`
	Methods             []LoginViewMethods `json:"methods,omitempty"`
	SsoAuthorizationURL *string            `json:"sso_authorization_url,omitempty"`
}

func (o *LoginView) GetActions() []LoginViewActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *LoginView) GetMethods() []LoginViewMethods {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *LoginView) GetSsoAuthorizationURL() *string {
	if o == nil {
		return nil
	}
	return o.SsoAuthorizationURL
}
