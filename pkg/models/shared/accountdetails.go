// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/utils"
)

// Addresses - The address object returned in the response.
type Addresses struct {
	// The company name associated with this address.
	Company *string `json:"company,omitempty"`
	// The name of the country associated with this address.
	Country *string `json:"country,omitempty"`
	// The ISO 3166-1 alpha-2 country code associated with this address.
	CountryCode *string `json:"country_code,omitempty"`
	// The default shipping address chosen by the shopper.
	Default *bool `json:"default,omitempty"`
	// The building door code or community gate code.
	DoorCode *string `json:"door_code,omitempty"`
	// An email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The given name of the person associated with this address.
	FirstName *string `json:"first_name,omitempty"`
	// The unique Bolt ID associated with this address.
	ID *string `json:"id,omitempty"`
	// The surname of the person associated with this address.
	LastName *string `json:"last_name,omitempty"`
	// The city name details associated with this address.
	Locality *string `json:"locality,omitempty"`
	// A key-value pair object that allows users to store arbitrary information associated with an object.  For any individual account object, we allow up to 50 keys. Keys can be up to 40 characters long and values can be up to 500 characters long.  Metadata should not contain any sensitive customer information, like PII (Personally Identifiable Information). For more information about metadata, see our [documentation](https://help.bolt.com/developers/references/embedded-metadata/).
	//
	Metadata *Metadata `json:"metadata,omitempty"`
	// The given and surname of the person associated with this address.
	Name *string `json:"name,omitempty"`
	// A phone number following E164 standards, in its globalized format, i.e. prepended with a plus sign.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The postal or zip code associated with this address.
	PostalCode *string `json:"postal_code,omitempty"`
	// The region details such as state or province associated with this address.
	Region *string `json:"region,omitempty"`
	// The the ISO 3166-2 region code associated with this address.
	RegionCode *string `json:"region_code,omitempty"`
	// The street number and street name of the address.
	StreetAddress1 *string `json:"street_address1,omitempty"`
	// Any apartment, floor, or unit details.
	StreetAddress2 *string `json:"street_address2,omitempty"`
	// Any additional street address details.
	StreetAddress3 *string `json:"street_address3,omitempty"`
	// Any additional street address details.
	StreetAddress4 *string `json:"street_address4,omitempty"`
}

func (o *Addresses) GetCompany() *string {
	if o == nil {
		return nil
	}
	return o.Company
}

func (o *Addresses) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *Addresses) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *Addresses) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *Addresses) GetDoorCode() *string {
	if o == nil {
		return nil
	}
	return o.DoorCode
}

func (o *Addresses) GetEmailAddress() *string {
	if o == nil {
		return nil
	}
	return o.EmailAddress
}

func (o *Addresses) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *Addresses) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Addresses) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *Addresses) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *Addresses) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *Addresses) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Addresses) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *Addresses) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *Addresses) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *Addresses) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *Addresses) GetStreetAddress1() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress1
}

func (o *Addresses) GetStreetAddress2() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress2
}

func (o *Addresses) GetStreetAddress3() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress3
}

func (o *Addresses) GetStreetAddress4() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress4
}

type PaymentMethodsType string

const (
	PaymentMethodsTypeSavedCreditCardView    PaymentMethodsType = "saved_credit_card_view"
	PaymentMethodsTypeSavedPaypalAccountView PaymentMethodsType = "saved_paypal_account_view"
)

type PaymentMethods struct {
	SavedCreditCardView    *SavedCreditCardView
	SavedPaypalAccountView *SavedPaypalAccountView

	Type PaymentMethodsType
}

func CreatePaymentMethodsSavedCreditCardView(savedCreditCardView SavedCreditCardView) PaymentMethods {
	typ := PaymentMethodsTypeSavedCreditCardView

	return PaymentMethods{
		SavedCreditCardView: &savedCreditCardView,
		Type:                typ,
	}
}

func CreatePaymentMethodsSavedPaypalAccountView(savedPaypalAccountView SavedPaypalAccountView) PaymentMethods {
	typ := PaymentMethodsTypeSavedPaypalAccountView

	return PaymentMethods{
		SavedPaypalAccountView: &savedPaypalAccountView,
		Type:                   typ,
	}
}

func (u *PaymentMethods) UnmarshalJSON(data []byte) error {

	savedPaypalAccountView := SavedPaypalAccountView{}
	if err := utils.UnmarshalJSON(data, &savedPaypalAccountView, "", true, true); err == nil {
		u.SavedPaypalAccountView = &savedPaypalAccountView
		u.Type = PaymentMethodsTypeSavedPaypalAccountView
		return nil
	}

	savedCreditCardView := SavedCreditCardView{}
	if err := utils.UnmarshalJSON(data, &savedCreditCardView, "", true, true); err == nil {
		u.SavedCreditCardView = &savedCreditCardView
		u.Type = PaymentMethodsTypeSavedCreditCardView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentMethods) MarshalJSON() ([]byte, error) {
	if u.SavedCreditCardView != nil {
		return utils.MarshalJSON(u.SavedCreditCardView, "", true)
	}

	if u.SavedPaypalAccountView != nil {
		return utils.MarshalJSON(u.SavedPaypalAccountView, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type AccountDetails struct {
	// A list of all addresses associated to the shopper's account.
	Addresses []Addresses `json:"addresses,omitempty"`
	// Used to determine whether a Bolt Account exists with this shopper's account details.
	HasBoltAccount *bool `json:"has_bolt_account,omitempty"`
	// A list of all payment methods associated to the shopper's account.
	PaymentMethods []PaymentMethods `json:"payment_methods,omitempty"`
	// The shopper's account profile.
	Profile *ProfileView `json:"profile,omitempty"`
}

func (o *AccountDetails) GetAddresses() []Addresses {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *AccountDetails) GetHasBoltAccount() *bool {
	if o == nil {
		return nil
	}
	return o.HasBoltAccount
}

func (o *AccountDetails) GetPaymentMethods() []PaymentMethods {
	if o == nil {
		return nil
	}
	return o.PaymentMethods
}

func (o *AccountDetails) GetProfile() *ProfileView {
	if o == nil {
		return nil
	}
	return o.Profile
}
