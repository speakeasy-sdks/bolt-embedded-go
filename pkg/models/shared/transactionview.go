// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransactionViewCaptureSplitsType - Fee type options. **Nullable** for Transactions Details.
type TransactionViewCaptureSplitsType string

const (
	TransactionViewCaptureSplitsTypeNet            TransactionViewCaptureSplitsType = "net"
	TransactionViewCaptureSplitsTypeProcessingFee  TransactionViewCaptureSplitsType = "processing_fee"
	TransactionViewCaptureSplitsTypeRiskFee        TransactionViewCaptureSplitsType = "risk_fee"
	TransactionViewCaptureSplitsTypeApmFee         TransactionViewCaptureSplitsType = "apm_fee"
	TransactionViewCaptureSplitsTypeNetworkFee     TransactionViewCaptureSplitsType = "network_fee"
	TransactionViewCaptureSplitsTypePlatformFee    TransactionViewCaptureSplitsType = "platform_fee"
	TransactionViewCaptureSplitsTypeBoltAccountFee TransactionViewCaptureSplitsType = "bolt_account_fee"
)

func (e TransactionViewCaptureSplitsType) ToPointer() *TransactionViewCaptureSplitsType {
	return &e
}

func (e *TransactionViewCaptureSplitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "net":
		fallthrough
	case "processing_fee":
		fallthrough
	case "risk_fee":
		fallthrough
	case "apm_fee":
		fallthrough
	case "network_fee":
		fallthrough
	case "platform_fee":
		fallthrough
	case "bolt_account_fee":
		*e = TransactionViewCaptureSplitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionViewCaptureSplitsType: %v", v)
	}
}

// TransactionViewCaptureSplits - A split of fees by type and amount.
type TransactionViewCaptureSplits struct {
	Amount *AmountView `json:"amount,omitempty"`
	// Fee type options. **Nullable** for Transactions Details.
	//
	Type *TransactionViewCaptureSplitsType `json:"type,omitempty"`
}

func (o *TransactionViewCaptureSplits) GetAmount() *AmountView {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransactionViewCaptureSplits) GetType() *TransactionViewCaptureSplitsType {
	if o == nil {
		return nil
	}
	return o.Type
}

// TransactionViewCapture - Deprecated. Use `captures`.
type TransactionViewCapture struct {
	Amount *AmountView `json:"amount,omitempty"`
	// The unique ID for the capture. **Nullable** for Transactions Details.
	ID *string `json:"id,omitempty"`
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string `json:"merchant_event_id,omitempty"`
	// Additional information about the capture. For example, the processor capture ID. **Nullable** for Transactions Details.
	Metadata map[string]string `json:"metadata,omitempty"`
	// A split of fees by type and amount. **Nullable** for Transactions Details.
	Splits []TransactionViewCaptureSplits `json:"splits,omitempty"`
	// The status of the capture. **Nullable** for Transactions Details.
	Status *CaptureStatus `json:"status,omitempty"`
}

func (o *TransactionViewCapture) GetAmount() *AmountView {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransactionViewCapture) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TransactionViewCapture) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *TransactionViewCapture) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *TransactionViewCapture) GetSplits() []TransactionViewCaptureSplits {
	if o == nil {
		return nil
	}
	return o.Splits
}

func (o *TransactionViewCapture) GetStatus() *CaptureStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

// TransactionViewRiskReviewStatus - Describes the current Risk Review status. A transaction could be unreviewed, reviewed, or pending manual review by the Bolt team.
type TransactionViewRiskReviewStatus string

const (
	TransactionViewRiskReviewStatusUnknown     TransactionViewRiskReviewStatus = "unknown"
	TransactionViewRiskReviewStatusNeedsReview TransactionViewRiskReviewStatus = "needs_review"
	TransactionViewRiskReviewStatusReviewed    TransactionViewRiskReviewStatus = "reviewed"
)

func (e TransactionViewRiskReviewStatus) ToPointer() *TransactionViewRiskReviewStatus {
	return &e
}

func (e *TransactionViewRiskReviewStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "needs_review":
		fallthrough
	case "reviewed":
		*e = TransactionViewRiskReviewStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionViewRiskReviewStatus: %v", v)
	}
}

type TransactionViewViewStatus string

const (
	TransactionViewViewStatusNotViewed TransactionViewViewStatus = "not_viewed"
	TransactionViewViewStatusViewed    TransactionViewViewStatus = "viewed"
	TransactionViewViewStatusViewing   TransactionViewViewStatus = "viewing"
)

func (e TransactionViewViewStatus) ToPointer() *TransactionViewViewStatus {
	return &e
}

func (e *TransactionViewViewStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "not_viewed":
		fallthrough
	case "viewed":
		fallthrough
	case "viewing":
		*e = TransactionViewViewStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionViewViewStatus: %v", v)
	}
}

// TransactionViewVoidCause - Specifies why this particular transaction is voided.
type TransactionViewVoidCause string

const (
	TransactionViewVoidCauseMerchantAction          TransactionViewVoidCause = "merchant_action"
	TransactionViewVoidCausePaypalSync              TransactionViewVoidCause = "paypal_sync"
	TransactionViewVoidCauseAmazonPaySync           TransactionViewVoidCause = "amazon_pay_sync"
	TransactionViewVoidCauseIrreversibleReject      TransactionViewVoidCause = "irreversible_reject"
	TransactionViewVoidCauseAuthExpire              TransactionViewVoidCause = "auth_expire"
	TransactionViewVoidCauseAuthVerificationExpired TransactionViewVoidCause = "auth_verification_expired"
	TransactionViewVoidCausePaymentMethodUpdater    TransactionViewVoidCause = "payment_method_updater"
	TransactionViewVoidCauseLessThanNilGreaterThan  TransactionViewVoidCause = "<nil>"
)

func (e TransactionViewVoidCause) ToPointer() *TransactionViewVoidCause {
	return &e
}

func (e *TransactionViewVoidCause) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "merchant_action":
		fallthrough
	case "paypal_sync":
		fallthrough
	case "amazon_pay_sync":
		fallthrough
	case "irreversible_reject":
		fallthrough
	case "auth_expire":
		fallthrough
	case "auth_verification_expired":
		fallthrough
	case "payment_method_updater":
		fallthrough
	case "<nil>":
		*e = TransactionViewVoidCause(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionViewVoidCause: %v", v)
	}
}

// TransactionViewVoidStatus - The status of the void request.
type TransactionViewVoidStatus string

const (
	TransactionViewVoidStatusSucceeded TransactionViewVoidStatus = "succeeded"
	TransactionViewVoidStatusDeclined  TransactionViewVoidStatus = "declined"
	TransactionViewVoidStatusError     TransactionViewVoidStatus = "error"
)

func (e TransactionViewVoidStatus) ToPointer() *TransactionViewVoidStatus {
	return &e
}

func (e *TransactionViewVoidStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "declined":
		fallthrough
	case "error":
		*e = TransactionViewVoidStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionViewVoidStatus: %v", v)
	}
}

type TransactionViewVoid struct {
	// Specifies why this particular transaction is voided.
	Cause *TransactionViewVoidCause `json:"cause,omitempty"`
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string `json:"merchant_event_id,omitempty"`
	// The status of the void request.
	Status *TransactionViewVoidStatus `json:"status,omitempty"`
	// The void ID returned from the payment processor.
	Void *string `json:"void,omitempty"`
}

func (o *TransactionViewVoid) GetCause() *TransactionViewVoidCause {
	if o == nil {
		return nil
	}
	return o.Cause
}

func (o *TransactionViewVoid) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *TransactionViewVoid) GetStatus() *TransactionViewVoidStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TransactionViewVoid) GetVoid() *string {
	if o == nil {
		return nil
	}
	return o.Void
}

type TransactionView struct {
	Amount        *AmountView                  `json:"amount,omitempty"`
	Authorization *CreditCardAuthorizationView `json:"authorization,omitempty"`
	// Deprecated. Use `captures`.
	Capture  *TransactionViewCapture `json:"capture,omitempty"`
	Captures []CreditCardCaptureView `json:"captures,omitempty"`
	Credit   *CreditCardCreditView   `json:"credit,omitempty"`
	// Transaction date. **Nullable** for Transactions Details.
	Date         *int64            `json:"date,omitempty"`
	FromConsumer *ConsumerSelfView `json:"from_consumer,omitempty"`
	// Contains details about the credit card transaction.
	FromCreditCard *CreditCardView `json:"from_credit_card,omitempty"`
	// The unique ID associated with the transaction. **Nullable** for Transactions Details.
	ID *string `json:"id,omitempty"`
	// Describes whether the transaction is indemnified by Bolt for fraud.
	//
	IndemnificationDecision *TransactionIndemnificationDecision `json:"indemnification_decision,omitempty"`
	// Describes the reason that the transaction is or is not indemnified by Bolt for fraud.
	//
	IndemnificationReason *TransactionIndemnificationReason `json:"indemnification_reason,omitempty"`
	// The card's last 4 digits. **Nullable** for Transactions Details.
	Last4               *string                      `json:"last4,omitempty"`
	LastViewedUtc       *float64                     `json:"last_viewed_utc,omitempty"`
	MerchantDivision    *MerchantDivisionSummaryView `json:"merchant_division,omitempty"`
	MerchantOrderNumber *string                      `json:"merchant_order_number,omitempty"`
	OrderDecision       *OrderDecisionDetailsView    `json:"order_decision,omitempty"`
	// The processor used. **Nullable** for Transactions Details.
	Processor *TransactionProcessor `json:"processor,omitempty"`
	// The transaction's 12-digit Bolt reference ID. **Nullable** for Transactions Details.
	Reference    *string                      `json:"reference,omitempty"`
	ReviewTicket *ReviewTicketView            `json:"review_ticket,omitempty"`
	RiskInsights *RiskModelExternalResultView `json:"risk_insights,omitempty"`
	// Describes the current Risk Review status. A transaction could be unreviewed, reviewed, or pending manual review by the Bolt team.
	RiskReviewStatus *TransactionViewRiskReviewStatus `json:"risk_review_status,omitempty"`
	RiskScore        *int64                           `json:"risk_score,omitempty"`
	Splits           []TransactionSplitsView          `json:"splits,omitempty"`
	// The transaction's status.
	Status     *TransactionStatus `json:"status,omitempty"`
	ToConsumer *ConsumerSelfView  `json:"to_consumer,omitempty"`
	// Contains details about the credit card transaction.
	ToCreditCard          *CreditCardView   `json:"to_credit_card,omitempty"`
	TransactionProperties map[string]string `json:"transaction_properties,omitempty"`
	// The type of transaction.
	Type       *TransactionType           `json:"type,omitempty"`
	ViewStatus *TransactionViewViewStatus `json:"view_status,omitempty"`
	Void       *TransactionViewVoid       `json:"void,omitempty"`
}

func (o *TransactionView) GetAmount() *AmountView {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransactionView) GetAuthorization() *CreditCardAuthorizationView {
	if o == nil {
		return nil
	}
	return o.Authorization
}

func (o *TransactionView) GetCapture() *TransactionViewCapture {
	if o == nil {
		return nil
	}
	return o.Capture
}

func (o *TransactionView) GetCaptures() []CreditCardCaptureView {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *TransactionView) GetCredit() *CreditCardCreditView {
	if o == nil {
		return nil
	}
	return o.Credit
}

func (o *TransactionView) GetDate() *int64 {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *TransactionView) GetFromConsumer() *ConsumerSelfView {
	if o == nil {
		return nil
	}
	return o.FromConsumer
}

func (o *TransactionView) GetFromCreditCard() *CreditCardView {
	if o == nil {
		return nil
	}
	return o.FromCreditCard
}

func (o *TransactionView) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TransactionView) GetIndemnificationDecision() *TransactionIndemnificationDecision {
	if o == nil {
		return nil
	}
	return o.IndemnificationDecision
}

func (o *TransactionView) GetIndemnificationReason() *TransactionIndemnificationReason {
	if o == nil {
		return nil
	}
	return o.IndemnificationReason
}

func (o *TransactionView) GetLast4() *string {
	if o == nil {
		return nil
	}
	return o.Last4
}

func (o *TransactionView) GetLastViewedUtc() *float64 {
	if o == nil {
		return nil
	}
	return o.LastViewedUtc
}

func (o *TransactionView) GetMerchantDivision() *MerchantDivisionSummaryView {
	if o == nil {
		return nil
	}
	return o.MerchantDivision
}

func (o *TransactionView) GetMerchantOrderNumber() *string {
	if o == nil {
		return nil
	}
	return o.MerchantOrderNumber
}

func (o *TransactionView) GetOrderDecision() *OrderDecisionDetailsView {
	if o == nil {
		return nil
	}
	return o.OrderDecision
}

func (o *TransactionView) GetProcessor() *TransactionProcessor {
	if o == nil {
		return nil
	}
	return o.Processor
}

func (o *TransactionView) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *TransactionView) GetReviewTicket() *ReviewTicketView {
	if o == nil {
		return nil
	}
	return o.ReviewTicket
}

func (o *TransactionView) GetRiskInsights() *RiskModelExternalResultView {
	if o == nil {
		return nil
	}
	return o.RiskInsights
}

func (o *TransactionView) GetRiskReviewStatus() *TransactionViewRiskReviewStatus {
	if o == nil {
		return nil
	}
	return o.RiskReviewStatus
}

func (o *TransactionView) GetRiskScore() *int64 {
	if o == nil {
		return nil
	}
	return o.RiskScore
}

func (o *TransactionView) GetSplits() []TransactionSplitsView {
	if o == nil {
		return nil
	}
	return o.Splits
}

func (o *TransactionView) GetStatus() *TransactionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TransactionView) GetToConsumer() *ConsumerSelfView {
	if o == nil {
		return nil
	}
	return o.ToConsumer
}

func (o *TransactionView) GetToCreditCard() *CreditCardView {
	if o == nil {
		return nil
	}
	return o.ToCreditCard
}

func (o *TransactionView) GetTransactionProperties() map[string]string {
	if o == nil {
		return nil
	}
	return o.TransactionProperties
}

func (o *TransactionView) GetType() *TransactionType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TransactionView) GetViewStatus() *TransactionViewViewStatus {
	if o == nil {
		return nil
	}
	return o.ViewStatus
}

func (o *TransactionView) GetVoid() *TransactionViewVoid {
	if o == nil {
		return nil
	}
	return o.Void
}
