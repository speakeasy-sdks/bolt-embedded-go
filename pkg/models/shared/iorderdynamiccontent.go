// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TransactionProcessorType string

const (
	TransactionProcessorTypeAffirm          TransactionProcessorType = "affirm"
	TransactionProcessorTypeAfterpay        TransactionProcessorType = "afterpay"
	TransactionProcessorTypeAmazonPay       TransactionProcessorType = "amazon_pay"
	TransactionProcessorTypeCredova         TransactionProcessorType = "credova"
	TransactionProcessorTypeKlarna          TransactionProcessorType = "klarna"
	TransactionProcessorTypePaypal          TransactionProcessorType = "paypal"
	TransactionProcessorTypeSezzle          TransactionProcessorType = "sezzle"
	TransactionProcessorTypeRadialKlarna    TransactionProcessorType = "radial_klarna"
	TransactionProcessorTypeRadialPaypal    TransactionProcessorType = "radial_paypal"
	TransactionProcessorTypeAdyenGateway    TransactionProcessorType = "adyen_gateway"
	TransactionProcessorTypeAllianceData    TransactionProcessorType = "alliance_data"
	TransactionProcessorTypeAuthorizeNet    TransactionProcessorType = "authorize_net"
	TransactionProcessorTypeBraintree       TransactionProcessorType = "braintree"
	TransactionProcessorTypeCardconnect     TransactionProcessorType = "cardconnect"
	TransactionProcessorTypeCheckoutCom     TransactionProcessorType = "checkout_com"
	TransactionProcessorTypeCybersource     TransactionProcessorType = "cybersource"
	TransactionProcessorTypeFirstData       TransactionProcessorType = "first_data"
	TransactionProcessorTypeNmi             TransactionProcessorType = "nmi"
	TransactionProcessorTypeOrbital         TransactionProcessorType = "orbital"
	TransactionProcessorTypePaypalPayflow   TransactionProcessorType = "paypal_payflow"
	TransactionProcessorTypeRadial          TransactionProcessorType = "radial"
	TransactionProcessorTypeRocketgate      TransactionProcessorType = "rocketgate"
	TransactionProcessorTypeShopifyPayments TransactionProcessorType = "shopify_payments"
	TransactionProcessorTypeStripe          TransactionProcessorType = "stripe"
	TransactionProcessorTypeMagentopayment  TransactionProcessorType = "magentopayment"
	TransactionProcessorTypeAdyenPayfac     TransactionProcessorType = "adyen_payfac"
	TransactionProcessorTypeVantiv          TransactionProcessorType = "vantiv"
	TransactionProcessorTypeGooglePay       TransactionProcessorType = "google_pay"
	TransactionProcessorTypeBolt            TransactionProcessorType = "bolt"
)

func (e TransactionProcessorType) ToPointer() *TransactionProcessorType {
	return &e
}

func (e *TransactionProcessorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "affirm":
		fallthrough
	case "afterpay":
		fallthrough
	case "amazon_pay":
		fallthrough
	case "credova":
		fallthrough
	case "klarna":
		fallthrough
	case "paypal":
		fallthrough
	case "sezzle":
		fallthrough
	case "radial_klarna":
		fallthrough
	case "radial_paypal":
		fallthrough
	case "adyen_gateway":
		fallthrough
	case "alliance_data":
		fallthrough
	case "authorize_net":
		fallthrough
	case "braintree":
		fallthrough
	case "cardconnect":
		fallthrough
	case "checkout_com":
		fallthrough
	case "cybersource":
		fallthrough
	case "first_data":
		fallthrough
	case "nmi":
		fallthrough
	case "orbital":
		fallthrough
	case "paypal_payflow":
		fallthrough
	case "radial":
		fallthrough
	case "rocketgate":
		fallthrough
	case "shopify_payments":
		fallthrough
	case "stripe":
		fallthrough
	case "magentopayment":
		fallthrough
	case "adyen_payfac":
		fallthrough
	case "vantiv":
		fallthrough
	case "google_pay":
		fallthrough
	case "bolt":
		*e = TransactionProcessorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionProcessorType: %v", v)
	}
}

type EligiblePaymentMethods struct {
	Eligible                 *bool                     `json:"eligible,omitempty"`
	TransactionProcessorType *TransactionProcessorType `json:"transaction_processor_type,omitempty"`
}

func (o *EligiblePaymentMethods) GetEligible() *bool {
	if o == nil {
		return nil
	}
	return o.Eligible
}

func (o *EligiblePaymentMethods) GetTransactionProcessorType() *TransactionProcessorType {
	if o == nil {
		return nil
	}
	return o.TransactionProcessorType
}

type HideApm string

const (
	HideApmPaypal       HideApm = "PAYPAL"
	HideApmAffirm       HideApm = "AFFIRM"
	HideApmAfterpay     HideApm = "AFTERPAY"
	HideApmAmazonpay    HideApm = "AMAZONPAY"
	HideApmKlarna       HideApm = "KLARNA"
	HideApmRadialpaypal HideApm = "RADIALPAYPAL"
	HideApmSezzle       HideApm = "SEZZLE"
	HideApmRadialklarna HideApm = "RADIALKLARNA"
	HideApmCredova      HideApm = "CREDOVA"
	HideApmGooglepay    HideApm = "GOOGLEPAY"
)

func (e HideApm) ToPointer() *HideApm {
	return &e
}

func (e *HideApm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAYPAL":
		fallthrough
	case "AFFIRM":
		fallthrough
	case "AFTERPAY":
		fallthrough
	case "AMAZONPAY":
		fallthrough
	case "KLARNA":
		fallthrough
	case "RADIALPAYPAL":
		fallthrough
	case "SEZZLE":
		fallthrough
	case "RADIALKLARNA":
		fallthrough
	case "CREDOVA":
		fallthrough
	case "GOOGLEPAY":
		*e = HideApm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HideApm: %v", v)
	}
}

type IOrderDynamicContent struct {
	CustomFields           []ICustomFieldView       `json:"custom_fields,omitempty"`
	EligiblePaymentMethods []EligiblePaymentMethods `json:"eligible_payment_methods,omitempty"`
	GiftOptionView         *IGiftOptionView         `json:"gift_option_view,omitempty"`
	HideApm                []HideApm                `json:"hide_apm,omitempty"`
	OrderNotice            *string                  `json:"order_notice,omitempty"`
	PaymentNotice          *string                  `json:"payment_notice,omitempty"`
	ShippingInfoNotice     *string                  `json:"shipping_info_notice,omitempty"`
	ShippingNotice         *string                  `json:"shipping_notice,omitempty"`
}

func (o *IOrderDynamicContent) GetCustomFields() []ICustomFieldView {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *IOrderDynamicContent) GetEligiblePaymentMethods() []EligiblePaymentMethods {
	if o == nil {
		return nil
	}
	return o.EligiblePaymentMethods
}

func (o *IOrderDynamicContent) GetGiftOptionView() *IGiftOptionView {
	if o == nil {
		return nil
	}
	return o.GiftOptionView
}

func (o *IOrderDynamicContent) GetHideApm() []HideApm {
	if o == nil {
		return nil
	}
	return o.HideApm
}

func (o *IOrderDynamicContent) GetOrderNotice() *string {
	if o == nil {
		return nil
	}
	return o.OrderNotice
}

func (o *IOrderDynamicContent) GetPaymentNotice() *string {
	if o == nil {
		return nil
	}
	return o.PaymentNotice
}

func (o *IOrderDynamicContent) GetShippingInfoNotice() *string {
	if o == nil {
		return nil
	}
	return o.ShippingInfoNotice
}

func (o *IOrderDynamicContent) GetShippingNotice() *string {
	if o == nil {
		return nil
	}
	return o.ShippingNotice
}
