// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransactionStatus - The transaction's status.
type TransactionStatus string

const (
	TransactionStatusInProgress           TransactionStatus = "in_progress"
	TransactionStatusCompleted            TransactionStatus = "completed"
	TransactionStatusCancelled            TransactionStatus = "cancelled"
	TransactionStatusFailed               TransactionStatus = "failed"
	TransactionStatusPending              TransactionStatus = "pending"
	TransactionStatusCreated              TransactionStatus = "created"
	TransactionStatusAuthorized           TransactionStatus = "authorized"
	TransactionStatusRejectedReversible   TransactionStatus = "rejected_reversible"
	TransactionStatusRejectedIrreversible TransactionStatus = "rejected_irreversible"
)

func (e TransactionStatus) ToPointer() *TransactionStatus {
	return &e
}

func (e *TransactionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_progress":
		fallthrough
	case "completed":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "pending":
		fallthrough
	case "created":
		fallthrough
	case "authorized":
		fallthrough
	case "rejected_reversible":
		fallthrough
	case "rejected_irreversible":
		*e = TransactionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionStatus: %v", v)
	}
}
