// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OAuthTokenInputRefreshGrantType - The type of OAuth 2.0 grant being utilized.
//
// The value will always be `refresh_token` when exchanging a refresh token for an access token.
type OAuthTokenInputRefreshGrantType string

const (
	OAuthTokenInputRefreshGrantTypeRefreshToken OAuthTokenInputRefreshGrantType = "refresh_token"
)

func (e OAuthTokenInputRefreshGrantType) ToPointer() *OAuthTokenInputRefreshGrantType {
	return &e
}

func (e *OAuthTokenInputRefreshGrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refresh_token":
		*e = OAuthTokenInputRefreshGrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OAuthTokenInputRefreshGrantType: %v", v)
	}
}

type OAuthTokenInputRefresh1 struct {
	// Merchant publishable key which can be found in the merchant dashboard
	ClientID string `form:"name=client_id"`
	// Your Bolt API Key.
	ClientSecret string `form:"name=client_secret"`
	// The type of OAuth 2.0 grant being utilized.
	//
	// The value will always be `refresh_token` when exchanging a refresh token for an access token.
	//
	GrantType OAuthTokenInputRefreshGrantType `form:"name=grant_type"`
	// The value of the refresh token issued to you in the originating OAuth token request.
	RefreshToken string `form:"name=refresh_token"`
	// The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`.
	Scope string `form:"name=scope"`
	// A randomly generated string issued to the merchant when receiving an authorization code used to prevent CSRF attacks
	State *string `form:"name=state"`
}

func (o *OAuthTokenInputRefresh1) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *OAuthTokenInputRefresh1) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *OAuthTokenInputRefresh1) GetGrantType() OAuthTokenInputRefreshGrantType {
	if o == nil {
		return OAuthTokenInputRefreshGrantType("")
	}
	return o.GrantType
}

func (o *OAuthTokenInputRefresh1) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *OAuthTokenInputRefresh1) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *OAuthTokenInputRefresh1) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}
