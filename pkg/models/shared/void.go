// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Cause - Specifies why this particular transaction is voided.
type Cause string

const (
	CauseMerchantAction          Cause = "merchant_action"
	CausePaypalSync              Cause = "paypal_sync"
	CauseAmazonPaySync           Cause = "amazon_pay_sync"
	CauseIrreversibleReject      Cause = "irreversible_reject"
	CauseAuthExpire              Cause = "auth_expire"
	CauseAuthVerificationExpired Cause = "auth_verification_expired"
	CausePaymentMethodUpdater    Cause = "payment_method_updater"
)

func (e Cause) ToPointer() *Cause {
	return &e
}

func (e *Cause) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "merchant_action":
		fallthrough
	case "paypal_sync":
		fallthrough
	case "amazon_pay_sync":
		fallthrough
	case "irreversible_reject":
		fallthrough
	case "auth_expire":
		fallthrough
	case "auth_verification_expired":
		fallthrough
	case "payment_method_updater":
		*e = Cause(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cause: %v", v)
	}
}

// Status - The status of the void request.
type Status string

const (
	StatusSucceeded Status = "succeeded"
	StatusDeclined  Status = "declined"
	StatusError     Status = "error"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "declined":
		fallthrough
	case "error":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type Void struct {
	// Specifies why this particular transaction is voided.
	Cause *Cause `json:"cause,omitempty"`
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string `json:"merchant_event_id,omitempty"`
	// The status of the void request.
	Status *Status `json:"status,omitempty"`
	// The void ID returned from the payment processor.
	Void *string `json:"void,omitempty"`
}

func (o *Void) GetCause() *Cause {
	if o == nil {
		return nil
	}
	return o.Cause
}

func (o *Void) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *Void) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Void) GetVoid() *string {
	if o == nil {
		return nil
	}
	return o.Void
}
