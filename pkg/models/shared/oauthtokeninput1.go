// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/utils"
)

// OAuthTokenInputScope - The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`. You can find more information on these options in our [OAuth scope documentation](https://help.bolt.com/developers/references/bolt-oauth/#scopes).
type OAuthTokenInputScope string

const (
	OAuthTokenInputScopeBoltAccountManage OAuthTokenInputScope = "bolt.account.manage"
	OAuthTokenInputScopeBoltAccountView   OAuthTokenInputScope = "bolt.account.view"
	OAuthTokenInputScopeOpenid            OAuthTokenInputScope = "openid"
)

func (e OAuthTokenInputScope) ToPointer() *OAuthTokenInputScope {
	return &e
}

func (e *OAuthTokenInputScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bolt.account.manage":
		fallthrough
	case "bolt.account.view":
		fallthrough
	case "openid":
		*e = OAuthTokenInputScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OAuthTokenInputScope: %v", v)
	}
}

type OAuthTokenInput1 struct {
	// Merchant publishable key which can be found in the merchant dashboard
	ClientID string `form:"name=client_id"`
	// Your Bolt API Key.
	ClientSecret string `form:"name=client_secret"`
	// Fetched value using OTP value from the Authorization Modal.
	Code string `form:"name=code"`
	// The type of OAuth 2.0 grant being utilized.
	//
	// The value will always be `authorization_code` when exchanging an authorization code for an access token.
	//
	grantType string `const:"authorization_code" form:"name=grant_type"`
	// The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`. You can find more information on these options in our [OAuth scope documentation](https://help.bolt.com/developers/references/bolt-oauth/#scopes).
	Scope OAuthTokenInputScope `form:"name=scope"`
	// A randomly generated string issued to the merchant when receiving an authorization code used to prevent CSRF attacks
	State *string `form:"name=state"`
}

func (o OAuthTokenInput1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OAuthTokenInput1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *OAuthTokenInput1) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *OAuthTokenInput1) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *OAuthTokenInput1) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *OAuthTokenInput1) GetGrantType() string {
	return "authorization_code"
}

func (o *OAuthTokenInput1) GetScope() OAuthTokenInputScope {
	if o == nil {
		return OAuthTokenInputScope("")
	}
	return o.Scope
}

func (o *OAuthTokenInput1) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}
