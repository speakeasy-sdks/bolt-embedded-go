// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/models/shared"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/utils"
	"net/http"
)

type AuthorizeTransactionSecurity struct {
	OAuth   string `security:"scheme,type=oauth2,name=Authorization"`
	XAPIKey string `security:"scheme,type=apiKey,subtype=header,name=X-API-Key"`
}

func (o *AuthorizeTransactionSecurity) GetOAuth() string {
	if o == nil {
		return ""
	}
	return o.OAuth
}

func (o *AuthorizeTransactionSecurity) GetXAPIKey() string {
	if o == nil {
		return ""
	}
	return o.XAPIKey
}

type AuthorizeTransactionRequestBodyType string

const (
	AuthorizeTransactionRequestBodyTypeMerchantCreditCardAuthorization         AuthorizeTransactionRequestBodyType = "merchant_credit_card_authorization"
	AuthorizeTransactionRequestBodyTypeMerchantCreditCardAuthorizationRecharge AuthorizeTransactionRequestBodyType = "merchant_credit_card_authorization_recharge"
)

type AuthorizeTransactionRequestBody struct {
	MerchantCreditCardAuthorization         *shared.MerchantCreditCardAuthorization
	MerchantCreditCardAuthorizationRecharge *shared.MerchantCreditCardAuthorizationRecharge

	Type AuthorizeTransactionRequestBodyType
}

func CreateAuthorizeTransactionRequestBodyMerchantCreditCardAuthorization(merchantCreditCardAuthorization shared.MerchantCreditCardAuthorization) AuthorizeTransactionRequestBody {
	typ := AuthorizeTransactionRequestBodyTypeMerchantCreditCardAuthorization

	return AuthorizeTransactionRequestBody{
		MerchantCreditCardAuthorization: &merchantCreditCardAuthorization,
		Type:                            typ,
	}
}

func CreateAuthorizeTransactionRequestBodyMerchantCreditCardAuthorizationRecharge(merchantCreditCardAuthorizationRecharge shared.MerchantCreditCardAuthorizationRecharge) AuthorizeTransactionRequestBody {
	typ := AuthorizeTransactionRequestBodyTypeMerchantCreditCardAuthorizationRecharge

	return AuthorizeTransactionRequestBody{
		MerchantCreditCardAuthorizationRecharge: &merchantCreditCardAuthorizationRecharge,
		Type:                                    typ,
	}
}

func (u *AuthorizeTransactionRequestBody) UnmarshalJSON(data []byte) error {

	merchantCreditCardAuthorizationRecharge := shared.MerchantCreditCardAuthorizationRecharge{}
	if err := utils.UnmarshalJSON(data, &merchantCreditCardAuthorizationRecharge, "", true, true); err == nil {
		u.MerchantCreditCardAuthorizationRecharge = &merchantCreditCardAuthorizationRecharge
		u.Type = AuthorizeTransactionRequestBodyTypeMerchantCreditCardAuthorizationRecharge
		return nil
	}

	merchantCreditCardAuthorization := shared.MerchantCreditCardAuthorization{}
	if err := utils.UnmarshalJSON(data, &merchantCreditCardAuthorization, "", true, true); err == nil {
		u.MerchantCreditCardAuthorization = &merchantCreditCardAuthorization
		u.Type = AuthorizeTransactionRequestBodyTypeMerchantCreditCardAuthorization
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuthorizeTransactionRequestBody) MarshalJSON() ([]byte, error) {
	if u.MerchantCreditCardAuthorization != nil {
		return utils.MarshalJSON(u.MerchantCreditCardAuthorization, "", true)
	}

	if u.MerchantCreditCardAuthorizationRecharge != nil {
		return utils.MarshalJSON(u.MerchantCreditCardAuthorizationRecharge, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type AuthorizeTransactionRequest struct {
	// A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/).
	IdempotencyKey *string `header:"style=simple,explode=false,name=Idempotency-Key"`
	// **Authorize a Transaction**
	// * • `merchant_credit_card_authorization`: For authorizing with a new, unsaved card. This can be for a guest checkout flow, one-time payment, or an existing Bolt shopper.
	// * • `merchant_credit_card_authorization_recharge`: For authorizing a card using a shoppers saved payment methods.
	// * • **Anytime the shopper is paying while logged-in attach their OAuth `access_token` to the request.**
	//
	RequestBody *AuthorizeTransactionRequestBody `request:"mediaType=application/json"`
	// The publicly viewable identifier used to identify a merchant division. This key is found in the Developer > API section of the Bolt Merchant Dashboard [RECOMMENDED].
	XPublishableKey *string `header:"style=simple,explode=false,name=X-Publishable-Key"`
}

func (o *AuthorizeTransactionRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

func (o *AuthorizeTransactionRequest) GetRequestBody() *AuthorizeTransactionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *AuthorizeTransactionRequest) GetXPublishableKey() *string {
	if o == nil {
		return nil
	}
	return o.XPublishableKey
}

type AuthorizeTransactionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Authorization Successful
	IAuthorizeResultView *shared.IAuthorizeResultView
}

func (o *AuthorizeTransactionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *AuthorizeTransactionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *AuthorizeTransactionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *AuthorizeTransactionResponse) GetIAuthorizeResultView() *shared.IAuthorizeResultView {
	if o == nil {
		return nil
	}
	return o.IAuthorizeResultView
}
