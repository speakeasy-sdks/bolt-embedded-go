// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/models/shared"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/utils"
	"net/http"
)

type OAuthTokenRequestBodyType string

const (
	OAuthTokenRequestBodyTypeOAuthTokenInput1       OAuthTokenRequestBodyType = "o_auth_token_input1"
	OAuthTokenRequestBodyTypeOAuthTokenInputRefresh OAuthTokenRequestBodyType = "o_auth_token_input_refresh"
)

type OAuthTokenRequestBody struct {
	OAuthTokenInput1       *shared.OAuthTokenInput1
	OAuthTokenInputRefresh *shared.OAuthTokenInputRefresh

	Type OAuthTokenRequestBodyType
}

func CreateOAuthTokenRequestBodyOAuthTokenInput1(oAuthTokenInput1 shared.OAuthTokenInput1) OAuthTokenRequestBody {
	typ := OAuthTokenRequestBodyTypeOAuthTokenInput1

	return OAuthTokenRequestBody{
		OAuthTokenInput1: &oAuthTokenInput1,
		Type:             typ,
	}
}

func CreateOAuthTokenRequestBodyOAuthTokenInputRefresh(oAuthTokenInputRefresh shared.OAuthTokenInputRefresh) OAuthTokenRequestBody {
	typ := OAuthTokenRequestBodyTypeOAuthTokenInputRefresh

	return OAuthTokenRequestBody{
		OAuthTokenInputRefresh: &oAuthTokenInputRefresh,
		Type:                   typ,
	}
}

func (u *OAuthTokenRequestBody) UnmarshalJSON(data []byte) error {

	oAuthTokenInput1 := new(shared.OAuthTokenInput1)
	if err := utils.UnmarshalJSON(data, &oAuthTokenInput1, "", true, true); err == nil {
		u.OAuthTokenInput1 = oAuthTokenInput1
		u.Type = OAuthTokenRequestBodyTypeOAuthTokenInput1
		return nil
	}

	oAuthTokenInputRefresh := new(shared.OAuthTokenInputRefresh)
	if err := utils.UnmarshalJSON(data, &oAuthTokenInputRefresh, "", true, true); err == nil {
		u.OAuthTokenInputRefresh = oAuthTokenInputRefresh
		u.Type = OAuthTokenRequestBodyTypeOAuthTokenInputRefresh
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OAuthTokenRequestBody) MarshalJSON() ([]byte, error) {
	if u.OAuthTokenInput1 != nil {
		return utils.MarshalJSON(u.OAuthTokenInput1, "", true)
	}

	if u.OAuthTokenInputRefresh != nil {
		return utils.MarshalJSON(u.OAuthTokenInputRefresh, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OAuthTokenRequest struct {
	RequestBody *OAuthTokenRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// The publicly viewable identifier used to identify a merchant division. This key is found in the Developer > API section of the Bolt Merchant Dashboard [RECOMMENDED].
	XPublishableKey *string `header:"style=simple,explode=false,name=X-Publishable-Key"`
}

func (o *OAuthTokenRequest) GetRequestBody() *OAuthTokenRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *OAuthTokenRequest) GetXPublishableKey() *string {
	if o == nil {
		return nil
	}
	return o.XPublishableKey
}

type OAuthTokenResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Invalid request to OAuth Token.
	ErrorsOauthServerResponse *shared.ErrorsOauthServerResponse
	// OAuth token response.
	OAuthTokenResponse *shared.OAuthTokenResponse
}

func (o *OAuthTokenResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *OAuthTokenResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *OAuthTokenResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *OAuthTokenResponse) GetErrorsOauthServerResponse() *shared.ErrorsOauthServerResponse {
	if o == nil {
		return nil
	}
	return o.ErrorsOauthServerResponse
}

func (o *OAuthTokenResponse) GetOAuthTokenResponse() *shared.OAuthTokenResponse {
	if o == nil {
		return nil
	}
	return o.OAuthTokenResponse
}
