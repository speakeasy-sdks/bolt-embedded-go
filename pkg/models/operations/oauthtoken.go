// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/models/shared"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/utils"
	"net/http"
)

type OAuthTokenRequestBodyType string

const (
	OAuthTokenRequestBodyTypeOAuthTokenInput        OAuthTokenRequestBodyType = "o_auth_token_input"
	OAuthTokenRequestBodyTypeOAuthTokenInputRefresh OAuthTokenRequestBodyType = "o_auth_token_input_refresh"
)

type OAuthTokenRequestBody struct {
	OAuthTokenInput        *shared.OAuthTokenInput
	OAuthTokenInputRefresh *shared.OAuthTokenInputRefresh

	Type OAuthTokenRequestBodyType
}

func CreateOAuthTokenRequestBodyOAuthTokenInput(oAuthTokenInput shared.OAuthTokenInput) OAuthTokenRequestBody {
	typ := OAuthTokenRequestBodyTypeOAuthTokenInput

	return OAuthTokenRequestBody{
		OAuthTokenInput: &oAuthTokenInput,
		Type:            typ,
	}
}

func CreateOAuthTokenRequestBodyOAuthTokenInputRefresh(oAuthTokenInputRefresh shared.OAuthTokenInputRefresh) OAuthTokenRequestBody {
	typ := OAuthTokenRequestBodyTypeOAuthTokenInputRefresh

	return OAuthTokenRequestBody{
		OAuthTokenInputRefresh: &oAuthTokenInputRefresh,
		Type:                   typ,
	}
}

func (u *OAuthTokenRequestBody) UnmarshalJSON(data []byte) error {

	oAuthTokenInput := shared.OAuthTokenInput{}
	if err := utils.UnmarshalJSON(data, &oAuthTokenInput, "", true, true); err == nil {
		u.OAuthTokenInput = &oAuthTokenInput
		u.Type = OAuthTokenRequestBodyTypeOAuthTokenInput
		return nil
	}

	oAuthTokenInputRefresh := shared.OAuthTokenInputRefresh{}
	if err := utils.UnmarshalJSON(data, &oAuthTokenInputRefresh, "", true, true); err == nil {
		u.OAuthTokenInputRefresh = &oAuthTokenInputRefresh
		u.Type = OAuthTokenRequestBodyTypeOAuthTokenInputRefresh
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OAuthTokenRequestBody) MarshalJSON() ([]byte, error) {
	if u.OAuthTokenInput != nil {
		return utils.MarshalJSON(u.OAuthTokenInput, "", true)
	}

	if u.OAuthTokenInputRefresh != nil {
		return utils.MarshalJSON(u.OAuthTokenInputRefresh, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OAuthTokenRequest struct {
	RequestBody *OAuthTokenRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// The publicly viewable identifier used to identify a merchant division. This key is found in the Developer > API section of the Bolt Merchant Dashboard [RECOMMENDED].
	XPublishableKey *string `header:"style=simple,explode=false,name=X-Publishable-Key"`
}

func (o *OAuthTokenRequest) GetRequestBody() *OAuthTokenRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *OAuthTokenRequest) GetXPublishableKey() *string {
	if o == nil {
		return nil
	}
	return o.XPublishableKey
}

type OAuthTokenResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OAuth token response.
	OAuthTokenResponse *shared.OAuthTokenResponse
}

func (o *OAuthTokenResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *OAuthTokenResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *OAuthTokenResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *OAuthTokenResponse) GetOAuthTokenResponse() *shared.OAuthTokenResponse {
	if o == nil {
		return nil
	}
	return o.OAuthTokenResponse
}
