// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/bolt-embedded-go/pkg/models/shared"
	"net/http"
)

type UpdatePaymentSecurity struct {
	OAuth   *string `security:"scheme,type=oauth2,name=Authorization"`
	XAPIKey *string `security:"scheme,type=apiKey,subtype=header,name=X-API-Key"`
}

func (o *UpdatePaymentSecurity) GetOAuth() *string {
	if o == nil {
		return nil
	}
	return o.OAuth
}

func (o *UpdatePaymentSecurity) GetXAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.XAPIKey
}

// UpdatePaymentRequestBodyShopperIdentity - Identification information for the Shopper. This is only required when creating a new Bolt account.
type UpdatePaymentRequestBodyShopperIdentity struct {
	// determines whether to create a bolt account for this shopper
	CreateBoltAccount *bool `json:"create_bolt_account,omitempty"`
	// Email address of the shopper
	Email string `json:"email"`
	// First name of the shopper
	FirstName string `json:"first_name"`
	// Last name of the shopper
	LastName string `json:"last_name"`
	// Phone number of the shopper
	Phone string `json:"phone"`
}

func (o *UpdatePaymentRequestBodyShopperIdentity) GetCreateBoltAccount() *bool {
	if o == nil {
		return nil
	}
	return o.CreateBoltAccount
}

func (o *UpdatePaymentRequestBodyShopperIdentity) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdatePaymentRequestBodyShopperIdentity) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *UpdatePaymentRequestBodyShopperIdentity) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *UpdatePaymentRequestBodyShopperIdentity) GetPhone() string {
	if o == nil {
		return ""
	}
	return o.Phone
}

type UpdatePaymentRequestBody struct {
	// The details of the cart being purchased with this payment.
	Cart *shared.CartCreate `json:"cart,omitempty"`
	// Identification information for the Shopper. This is only required when creating a new Bolt account.
	ShopperIdentity *UpdatePaymentRequestBodyShopperIdentity `json:"shopper_identity,omitempty"`
}

func (o *UpdatePaymentRequestBody) GetCart() *shared.CartCreate {
	if o == nil {
		return nil
	}
	return o.Cart
}

func (o *UpdatePaymentRequestBody) GetShopperIdentity() *UpdatePaymentRequestBodyShopperIdentity {
	if o == nil {
		return nil
	}
	return o.ShopperIdentity
}

type UpdatePaymentRequest struct {
	// A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/).
	IdempotencyKey *string                   `header:"style=simple,explode=false,name=Idempotency-Key"`
	RequestBody    *UpdatePaymentRequestBody `request:"mediaType=application/json"`
	// The publicly viewable identifier used to identify a merchant division. This key is found in the Developer > API section of the Bolt Merchant Dashboard [RECOMMENDED].
	XPublishableKey *string `header:"style=simple,explode=false,name=X-Publishable-Key"`
	// The ID received in the initial v1/payments request.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *UpdatePaymentRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

func (o *UpdatePaymentRequest) GetRequestBody() *UpdatePaymentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdatePaymentRequest) GetXPublishableKey() *string {
	if o == nil {
		return nil
	}
	return o.XPublishableKey
}

func (o *UpdatePaymentRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// UpdatePayment200ApplicationJSONStatus - The current payment status.
type UpdatePayment200ApplicationJSONStatus string

const (
	UpdatePayment200ApplicationJSONStatusAwaitingUserConfirmation UpdatePayment200ApplicationJSONStatus = "awaiting_user_confirmation"
	UpdatePayment200ApplicationJSONStatusPaymentReady             UpdatePayment200ApplicationJSONStatus = "payment_ready"
	UpdatePayment200ApplicationJSONStatusSuccess                  UpdatePayment200ApplicationJSONStatus = "success"
)

func (e UpdatePayment200ApplicationJSONStatus) ToPointer() *UpdatePayment200ApplicationJSONStatus {
	return &e
}

func (e *UpdatePayment200ApplicationJSONStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		fallthrough
	case "payment_ready":
		fallthrough
	case "success":
		*e = UpdatePayment200ApplicationJSONStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePayment200ApplicationJSONStatus: %v", v)
	}
}

// UpdatePayment200ApplicationJSON - Payment updated.
type UpdatePayment200ApplicationJSON struct {
	// The ID for a Payment Attempt
	ID *string `json:"id,omitempty"`
	// The current payment status.
	Status *UpdatePayment200ApplicationJSONStatus `json:"status,omitempty"`
}

func (o *UpdatePayment200ApplicationJSON) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdatePayment200ApplicationJSON) GetStatus() *UpdatePayment200ApplicationJSONStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdatePaymentResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Payment updated.
	UpdatePayment200ApplicationJSONObject *UpdatePayment200ApplicationJSON
}

func (o *UpdatePaymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdatePaymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdatePaymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdatePaymentResponse) GetUpdatePayment200ApplicationJSONObject() *UpdatePayment200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.UpdatePayment200ApplicationJSONObject
}
