// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type FinalizePaymentSecurity struct {
	OAuth   *string `security:"scheme,type=oauth2,name=Authorization"`
	XAPIKey *string `security:"scheme,type=apiKey,subtype=header,name=X-API-Key"`
}

func (o *FinalizePaymentSecurity) GetOAuth() *string {
	if o == nil {
		return nil
	}
	return o.OAuth
}

func (o *FinalizePaymentSecurity) GetXAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.XAPIKey
}

// FinalizePaymentRequestBodyShopperIdentity - Identification information for the Shopper
type FinalizePaymentRequestBodyShopperIdentity struct {
	// determines whether to create a bolt account for this shopper
	CreateBoltAccount *bool `json:"create_bolt_account,omitempty"`
	// Email address of the shopper
	Email string `json:"email"`
	// First name of the shopper
	FirstName string `json:"first_name"`
	// Last name of the shopper
	LastName string `json:"last_name"`
	// Phone number of the shopper
	Phone string `json:"phone"`
}

func (o *FinalizePaymentRequestBodyShopperIdentity) GetCreateBoltAccount() *bool {
	if o == nil {
		return nil
	}
	return o.CreateBoltAccount
}

func (o *FinalizePaymentRequestBodyShopperIdentity) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *FinalizePaymentRequestBodyShopperIdentity) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *FinalizePaymentRequestBodyShopperIdentity) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *FinalizePaymentRequestBodyShopperIdentity) GetPhone() string {
	if o == nil {
		return ""
	}
	return o.Phone
}

type FinalizePaymentRequestBody struct {
	// The reference ID associated with a transaction event (auth, capture, refund, void). This is an arbitrary identifier created by the merchant. Bolt does not enforce any uniqueness constraints on this ID. It is up to the merchant to generate identifiers that properly fulfill its needs.
	MerchantEventID *string `json:"merchant_event_id,omitempty"`
	// Identification information for the Shopper
	ShopperIdentity *FinalizePaymentRequestBodyShopperIdentity `json:"shopper_identity,omitempty"`
}

func (o *FinalizePaymentRequestBody) GetMerchantEventID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantEventID
}

func (o *FinalizePaymentRequestBody) GetShopperIdentity() *FinalizePaymentRequestBodyShopperIdentity {
	if o == nil {
		return nil
	}
	return o.ShopperIdentity
}

type FinalizePaymentRequest struct {
	// A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/).
	IdempotencyKey *string                     `header:"style=simple,explode=false,name=Idempotency-Key"`
	RequestBody    *FinalizePaymentRequestBody `request:"mediaType=application/json"`
	// The ID received in the initial v1/payments request.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *FinalizePaymentRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

func (o *FinalizePaymentRequest) GetRequestBody() *FinalizePaymentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *FinalizePaymentRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type FinalizePayment200ApplicationJSONPaypal struct {
	// An email address.
	Email *string `json:"email,omitempty"`
}

func (o *FinalizePayment200ApplicationJSONPaypal) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

// FinalizePayment200ApplicationJSONStatus - The current payment status.
type FinalizePayment200ApplicationJSONStatus string

const (
	FinalizePayment200ApplicationJSONStatusAwaitingUserConfirmation FinalizePayment200ApplicationJSONStatus = "awaiting_user_confirmation"
	FinalizePayment200ApplicationJSONStatusPaymentReady             FinalizePayment200ApplicationJSONStatus = "payment_ready"
	FinalizePayment200ApplicationJSONStatusSuccess                  FinalizePayment200ApplicationJSONStatus = "success"
)

func (e FinalizePayment200ApplicationJSONStatus) ToPointer() *FinalizePayment200ApplicationJSONStatus {
	return &e
}

func (e *FinalizePayment200ApplicationJSONStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		fallthrough
	case "payment_ready":
		fallthrough
	case "success":
		*e = FinalizePayment200ApplicationJSONStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinalizePayment200ApplicationJSONStatus: %v", v)
	}
}

type FinalizePayment200ApplicationJSONTransaction struct {
	// The Bolt transaction reference (can be used to fetch transaction details, capture, void or refund transaction)
	Reference *string `json:"reference,omitempty"`
}

func (o *FinalizePayment200ApplicationJSONTransaction) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

// FinalizePayment200ApplicationJSON - Payment Token Retrieved
type FinalizePayment200ApplicationJSON struct {
	// The ID for the given Payment Attempt
	ID *string `json:"id,omitempty"`
	// ID of the payment method in Bolt's system, only if the payment method is saved.
	PaymentMethodID *string                                  `json:"payment_method_id,omitempty"`
	Paypal          *FinalizePayment200ApplicationJSONPaypal `json:"paypal,omitempty"`
	// The current payment status.
	Status      *FinalizePayment200ApplicationJSONStatus      `json:"status,omitempty"`
	Transaction *FinalizePayment200ApplicationJSONTransaction `json:"transaction,omitempty"`
}

func (o *FinalizePayment200ApplicationJSON) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FinalizePayment200ApplicationJSON) GetPaymentMethodID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodID
}

func (o *FinalizePayment200ApplicationJSON) GetPaypal() *FinalizePayment200ApplicationJSONPaypal {
	if o == nil {
		return nil
	}
	return o.Paypal
}

func (o *FinalizePayment200ApplicationJSON) GetStatus() *FinalizePayment200ApplicationJSONStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *FinalizePayment200ApplicationJSON) GetTransaction() *FinalizePayment200ApplicationJSONTransaction {
	if o == nil {
		return nil
	}
	return o.Transaction
}

type FinalizePaymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Payment Token Retrieved
	FinalizePayment200ApplicationJSONObject *FinalizePayment200ApplicationJSON
}

func (o *FinalizePaymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *FinalizePaymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *FinalizePaymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *FinalizePaymentResponse) GetFinalizePayment200ApplicationJSONObject() *FinalizePayment200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.FinalizePayment200ApplicationJSONObject
}
